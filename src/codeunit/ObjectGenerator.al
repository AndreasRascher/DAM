codeunit 91003 DAMObjectGenerator
{
    procedure CreateNAVDataport(ObjectID: Integer) C: TextBuilder;
    begin
        c.AppendLine('OBJECT Dataport ' + format(ObjectID) + ' DAMExport');
        c.AppendLine('{');
        c.AppendLine('  OBJECT-PROPERTIES');
        c.AppendLine('  {');
        c.AppendLine('    Date=15.10.21;');
        c.AppendLine('    Time=17:52:52;');
        c.AppendLine('    Modified=Yes;');
        c.AppendLine('    Version List=DAM;');
        c.AppendLine('  }');
        c.AppendLine('  PROPERTIES');
        c.AppendLine('  {');
        c.AppendLine('    Import=No;');
        c.AppendLine('    OnInitDataport=BEGIN');
        c.AppendLine('                     CurrDataport.FILENAME := TEMPORARYPATH+''1.txt'';// Avoid Error On Run');
        c.AppendLine('                     IF ERASE(CurrDataport.FILENAME) THEN;');
        c.AppendLine('                   END;');
        c.AppendLine('');
        c.AppendLine('  }');
        c.AppendLine('  DATAITEMS');
        c.AppendLine('  {');
        c.AppendLine('  }');
        c.AppendLine('  REQUESTFORM');
        c.AppendLine('  {');
        c.AppendLine('    PROPERTIES');
        c.AppendLine('    {');
        c.AppendLine('      Width=13200;');
        c.AppendLine('      Height=3410;');
        c.AppendLine('      SourceTable=Table2000000058;');
        c.AppendLine('      OnOpenForm=BEGIN');
        c.AppendLine('                   THIS_OnOpenForm');
        c.AppendLine('                 END;');
        c.AppendLine('');
        c.AppendLine('      OnCloseForm=BEGIN');
        c.AppendLine('                    THIS_OnCloseForm');
        c.AppendLine('                  END;');
        c.AppendLine('');
        c.AppendLine('    }');
        c.AppendLine('    CONTROLS');
        c.AppendLine('    {');
        c.AppendLine('      { 1000000002;Label  ;0    ;0    ;0    ;0    ;InPage=-1;');
        c.AppendLine('                                                   InColumnHeading=Yes }');
        c.AppendLine('      { 1000000006;Label  ;0    ;0    ;0    ;0    ;InPage=-1;');
        c.AppendLine('                                                   InColumnHeading=Yes }');
        c.AppendLine('      { 1000000004;Label  ;0    ;0    ;0    ;0    ;InPage=-1;');
        c.AppendLine('                                                   InColumnHeading=Yes }');
        c.AppendLine('      { 1000000000;TextBox;220  ;770  ;12650;440  ;Name=ExportFolderPathCtrl;');
        c.AppendLine('                                                   InPage=-1;');
        c.AppendLine('                                                   CaptionML=[DEU=Ordner fuer Tabellendaten;');
        c.AppendLine('                                                              ENU=Folder for Table Data];');
        c.AppendLine('                                                   SourceExpr=ExportToFolderPath;');
        c.AppendLine('                                                   OnValidate=BEGIN');
        c.AppendLine('                                                                CheckFolderPath(ExportToFolderPath);');
        c.AppendLine('                                                              END;');
        c.AppendLine('                                                               }');
        c.AppendLine('      { 1000000092;Label  ;220  ;220  ;3300 ;440  ;ParentControl=1000000000;');
        c.AppendLine('                                                   InPage=-1 }');
        c.AppendLine('      { 1000000001;TextBox;220  ;1980 ;12650;440  ;Name=ExportObjectIDFilterCtrl;');
        c.AppendLine('                                                   HorzGlue=Both;');
        c.AppendLine('                                                   AssistEdit=Yes;');
        c.AppendLine('                                                   CaptionML=[DEU=Tabellen-ID Filter fuer Export;');
        c.AppendLine('                                                              ENU=Table ID Filter for Export];');
        c.AppendLine('                                                   SourceExpr=ExportTableIDFilter;');
        c.AppendLine('                                                   OnAssistEdit=BEGIN');
        c.AppendLine('                                                                  LookUpObjIDFilter');
        c.AppendLine('                                                                END;');
        c.AppendLine('                                                                 }');
        c.AppendLine('      { 1000000003;Label  ;220  ;1430 ;10670;440  ;ParentControl=1000000001;');
        c.AppendLine('                                                   InPage=-1 }');
        c.AppendLine('      { 1000000005;CommandButton;220;2640;3300;550;Name=ExportCtrl;');
        c.AppendLine('                                                   CaptionML=[DEU=Daten exportieren;');
        c.AppendLine('                                                              ENU=Export Data];');
        c.AppendLine('                                                   OnPush=BEGIN');
        c.AppendLine('                                                            THIS_ExportCtrl_OnPush');
        c.AppendLine('                                                          END;');
        c.AppendLine('                                                           }');
        c.AppendLine('      { 1000000007;CommandButton;4400;2640;3300;550;');
        c.AppendLine('                                                   Name=ExportCtrl;');
        c.AppendLine('                                                   InPage=-1;');
        c.AppendLine('                                                   CaptionML=[DEU=Schema exportieren (Felder);');
        c.AppendLine('                                                              ENU=Export Schema (Fields)];');
        c.AppendLine('                                                   OnPush=BEGIN');
        c.AppendLine('                                                            THIS_ExportFieldsCtrl_OnPush');
        c.AppendLine('                                                          END;');
        c.AppendLine('                                                           }');
        c.AppendLine('    }');
        c.AppendLine('  }');
        c.AppendLine('  CODE');
        c.AppendLine('  {');
        c.AppendLine('    VAR');
        c.AppendLine('      ExportToFolderPath@1000000000 : Text[1024];');
        c.AppendLine('      ExportTableIDFilter@1000000001 : Text[1024];');
        c.AppendLine('      ADOStream@1000000003 : Automation "{B691E011-1797-432E-907A-4D8C69339129} 6.0:{00000566-0000-0010-8000-00AA006D2EA4}:''Microsoft ActiveX Data Objects 6.0 Library''.Stream";');
        c.AppendLine('');
        c.AppendLine('    PROCEDURE CheckFolderPath@1000000000(FolderPathToCheck@1000000000 : Text[1024]);');
        c.AppendLine('    VAR');
        c.AppendLine('      FSO@1000000001 : Automation "{420B2830-E718-11CF-893D-00A0C9054228} 1.0:{0D43FE01-F093-11CF-8940-00A0C9054228}:''Microsoft Scripting Runtime''.FileSystemObject";');
        c.AppendLine('    BEGIN');
        c.AppendLine('      IF ISCLEAR(FSO) THEN');
        c.AppendLine('        CREATE(FSO);');
        c.AppendLine('      IF NOT FSO.FolderExists(FolderPathToCheck) THEN');
        c.AppendLine('       ERROR(STRSUBSTNO(''Ungï¿½ltiger Ordnerpfad: %1'',FolderPathToCheck));');
        c.AppendLine('      IF ExportToFolderPath[STRLEN(ExportToFolderPath)]<>''\'' THEN');
        c.AppendLine('        ExportToFolderPath += ''\'';');
        c.AppendLine('    END;');
        c.AppendLine('');
        c.AppendLine('    PROCEDURE THIS_ExportCtrl_OnPush@1000000002();');
        c.AppendLine('    VAR');
        c.AppendLine('      AllObjWithCaption@1000000000 : Record 2000000058;');
        c.AppendLine('      ExportToPath@1000000001 : Text[1024];');
        c.AppendLine('      ExportDuration@1000000002 : Duration;');
        c.AppendLine('      Progress@1000000003 : Dialog;');
        c.AppendLine('      ReadyMsg@1000000004 : Text[1024];');
        c.AppendLine('      TAB@1000000005 : Text[1];');
        c.AppendLine('    BEGIN');
        c.AppendLine('      AllObjWithCaption.SETRANGE("Object Type",AllObjWithCaption."Object Type"::TableData);');
        c.AppendLine('      AllObjWithCaption.SETFILTER("Object ID",ExportTableIDFilter);');
        c.AppendLine('      IF NOT AllObjWithCaption.FINDSET THEN EXIT;');
        c.AppendLine('      TAB[1] := 9; // TAB');
        c.AppendLine('');
        c.AppendLine('      REPEAT');
        c.AppendLine('        IF NOT IsTableInLicense(AllObjWithCaption."Object ID") THEN');
        c.AppendLine('        MESSAGE(''Achtung: Tabelle %1 - %2 ist nicht in der Lizenz.'',AllObjWithCaption."Object ID",AllObjWithCaption."Object Caption");');
        c.AppendLine('      UNTIL AllObjWithCaption.NEXT = 0;');
        c.AppendLine('');
        c.AppendLine('      ReadyMsg:=''DAM EXPORT:'';');
        c.AppendLine('      AllObjWithCaption.FINDSET;');
        c.AppendLine('      REPEAT');
        c.AppendLine('        ExportToPath := ExportToFolderPath + CONVERTSTR(AllObjWithCaption."Object Caption",''<>*\/|"'',''_______'') +''.txt'';');
        c.AppendLine('');
        c.AppendLine('        EXPORT_ExportFullTable(ExportToPath,AllObjWithCaption."Object ID",FALSE,ExportDuration,FALSE,FALSE,'''');');
        c.AppendLine('        ReadyMsg += STRSUBSTNO(''\%1:%2%3'',AllObjWithCaption."Object Caption",TAB,ExportDuration);');
        c.AppendLine('');
        c.AppendLine('      UNTIL AllObjWithCaption.NEXT = 0;');
        c.AppendLine('      MESSAGE(ReadyMsg)');
        c.AppendLine('    END;');
        c.AppendLine('');
        c.AppendLine('    PROCEDURE THIS_ExportFieldsCtrl_OnPush@1000000016();');
        c.AppendLine('    VAR');
        c.AppendLine('      AllObjWithCaption@1000000004 : Record 2000000058;');
        c.AppendLine('      ExportToPath@1000000003 : Text[1024];');
        c.AppendLine('      ExportDuration@1000000002 : Duration;');
        c.AppendLine('      Progress@1000000001 : Dialog;');
        c.AppendLine('      ReadyMsg@1000000000 : Text[1024];');
        c.AppendLine('      Field@1000000005 : Record 2000000041;');
        c.AppendLine('    BEGIN');
        c.AppendLine('      AllObjWithCaption.SETRANGE("Object Type",AllObjWithCaption."Object Type"::TableData);');
        c.AppendLine('      AllObjWithCaption.SETRANGE("Object ID",DATABASE::Field);');
        c.AppendLine('      IF NOT AllObjWithCaption.FINDSET THEN EXIT;');
        c.AppendLine('      ReadyMsg:=''DAM EXPORT:'';');
        c.AppendLine('      REPEAT');
        c.AppendLine('        ExportToPath := ExportToFolderPath + ''Schema''+''.txt'';');
        c.AppendLine('        Progress.OPEN(STRSUBSTNO(''Export %1'',CONVERTSTR(ExportToPath,''\'',''/'')));');
        c.AppendLine('        Field.SETRANGE(TableNo,0,2000000000);');
        c.AppendLine('        EXPORT_ExportFullTable(ExportToPath,AllObjWithCaption."Object ID",FALSE,ExportDuration,TRUE,TRUE,Field.GETVIEW);');
        c.AppendLine('        ReadyMsg += STRSUBSTNO(''\%1: %2'',AllObjWithCaption."Object Caption",ExportDuration);');
        c.AppendLine('        Progress.CLOSE;');
        c.AppendLine('      UNTIL AllObjWithCaption.NEXT = 0;');
        c.AppendLine('      MESSAGE(ReadyMsg)');
        c.AppendLine('    END;');
        c.AppendLine('');
        c.AppendLine('    PROCEDURE THIS_OnOpenForm@1000000004();');
        c.AppendLine('    BEGIN');
        c.AppendLine('      LoadSettings');
        c.AppendLine('    END;');
        c.AppendLine('');
        c.AppendLine('    PROCEDURE THIS_OnCloseForm@1000000005();');
        c.AppendLine('    BEGIN');
        c.AppendLine('      SaveSettings;');
        c.AppendLine('      CurrDataport.QUIT;');
        c.AppendLine('    END;');
        c.AppendLine('');
        c.AppendLine('    PROCEDURE SaveSettings@1000000001();');
        c.AppendLine('    VAR');
        c.AppendLine('      _RecordLink@1000000000 : Record 2000000068;');
        c.AppendLine('      _AllObjWithCaption@1000000001 : Record 2000000058;');
        c.AppendLine('      _RecRef@1000000002 : RecordRef;');
        c.AppendLine('      _Content@1000000003 : BigText;');
        c.AppendLine('    BEGIN');
        c.AppendLine('      _AllObjWithCaption.GET(_AllObjWithCaption."Object Type"::Codeunit,1);');
        c.AppendLine('      _RecRef.GETTABLE(_AllObjWithCaption);');
        c.AppendLine('      _RecordLink.SETRANGE("Record ID",_RecRef.RECORDID);');
        c.AppendLine('      _RecordLink.SETRANGE(Description,''DAM'');');
        c.AppendLine('      IF NOT _RecordLink.FINDFIRST THEN BEGIN');
        c.AppendLine('        _RecordLink.GET(_AllObjWithCaption.ADDLINK('''',''DAM''));');
        c.AppendLine('      END;');
        c.AppendLine('');
        c.AppendLine('      _Content.ADDTEXT(ExportToFolderPath + CRLF + ExportTableIDFilter);');
        c.AppendLine('      WriteBlobText(_RecordLink,_Content);');
        c.AppendLine('    END;');
        c.AppendLine('');
        c.AppendLine('    PROCEDURE LoadSettings@1000000003();');
        c.AppendLine('    VAR');
        c.AppendLine('      _LineArray@1000000001 : ARRAY [10] OF Text[1024];');
        c.AppendLine('      _Content_FOUND@1000000000 : BigText;');
        c.AppendLine('      _RecordLink@1000000005 : Record 2000000068;');
        c.AppendLine('      _AllObjWithCaption@1000000004 : Record 2000000058;');
        c.AppendLine('      _RecRef@1000000003 : RecordRef;');
        c.AppendLine('      i@1000000002 : Integer;');
        c.AppendLine('    BEGIN');
        c.AppendLine('      _AllObjWithCaption.GET(_AllObjWithCaption."Object Type"::Codeunit,1);');
        c.AppendLine('      _RecRef.GETTABLE(_AllObjWithCaption);');
        c.AppendLine('      _RecordLink.SETRANGE("Record ID",_RecRef.RECORDID);');
        c.AppendLine('      _RecordLink.SETRANGE(Description,''DAM'');');
        c.AppendLine('      IF NOT _RecordLink.FINDFIRST THEN EXIT;');
        c.AppendLine('');
        c.AppendLine('      ReadBlobText(_RecordLink,_LineArray);');
        c.AppendLine('      FOR i:= 1 TO ARRAYLEN(_LineArray) DO BEGIN');
        c.AppendLine('          CASE i OF');
        c.AppendLine('            1: ExportToFolderPath  := _LineArray[i];');
        c.AppendLine('            2: ExportTableIDFilter := _LineArray[i];');
        c.AppendLine('          END;');
        c.AppendLine('      END;');
        c.AppendLine('    END;');
        c.AppendLine('');
        c.AppendLine('    PROCEDURE ReadBlobText@1000000006(VAR _RecordLink@1000000000 : Record 2000000068;VAR _LineArray@1000000005 : ARRAY [10] OF Text[1024]);');
        c.AppendLine('    VAR');
        c.AppendLine('      CRLF@1000000001 : Text[2];');
        c.AppendLine('      InS@1000000002 : InStream;');
        c.AppendLine('      LineText@1000000003 : Text[1024];');
        c.AppendLine('      LineCount@1000000004 : Integer;');
        c.AppendLine('    BEGIN');
        c.AppendLine('      _RecordLink.CALCFIELDS(Note);');
        c.AppendLine('      IF NOT _RecordLink.Note.HASVALUE THEN');
        c.AppendLine('      EXIT;');
        c.AppendLine('      CLEAR(_LineArray);');
        c.AppendLine('      _RecordLink.Note.CREATEINSTREAM(InS);');
        c.AppendLine('      WHILE NOT InS.EOS DO BEGIN');
        c.AppendLine('        LineCount += 1;');
        c.AppendLine('        InS.READTEXT(LineText);');
        c.AppendLine('        _LineArray[LineCount]:= LineText;');
        c.AppendLine('      END;');
        c.AppendLine('    END;');
        c.AppendLine('');
        c.AppendLine('    PROCEDURE WriteBlobText@1000000007(VAR _RecordLink@1000000001 : Record 2000000068;Content@1000000000 : BigText);');
        c.AppendLine('    VAR');
        c.AppendLine('      OutStream@1000000002 : OutStream;');
        c.AppendLine('    BEGIN');
        c.AppendLine('      CLEAR(_RecordLink.Note);');
        c.AppendLine('      IF FORMAT(Content) = '''' THEN BEGIN');
        c.AppendLine('      _RecordLink.MODIFY;');
        c.AppendLine('      EXIT;');
        c.AppendLine('      END;');
        c.AppendLine('      _RecordLink.Note.CREATEOUTSTREAM(OutStream);');
        c.AppendLine('      OutStream.WRITETEXT(FORMAT(Content));');
        c.AppendLine('      _RecordLink.MODIFY;');
        c.AppendLine('    END;');
        c.AppendLine('');
        c.AppendLine('    PROCEDURE CRLF@1000000008() CRLFLineBreak : Text[2];');
        c.AppendLine('    BEGIN');
        c.AppendLine('      CRLFLineBreak[1] := 13;');
        c.AppendLine('      CRLFLineBreak[2] := 10;');
        c.AppendLine('    END;');
        c.AppendLine('');
        c.AppendLine('    PROCEDURE LookUpObjIDFilter@1000000009();');
        c.AppendLine('    VAR');
        c.AppendLine('      AllObj@1000000000 : Record 2000000038;');
        c.AppendLine('    BEGIN');
        c.AppendLine('      AllObj.SETRANGE("Object Type",AllObj."Object Type"::Table);');
        c.AppendLine('      IF FORM.RUNMODAL(0,AllObj) = ACTION::LookupOK THEN BEGIN');
        c.AppendLine('        IF ExportTableIDFilter = '''' THEN');
        c.AppendLine('           ExportTableIDFilter += FORMAT(AllObj."Object ID")');
        c.AppendLine('         ELSE');
        c.AppendLine('           ExportTableIDFilter += ''|'' + FORMAT(AllObj."Object ID");');
        c.AppendLine('      END;');
        c.AppendLine('    END;');
        c.AppendLine('');
        c.AppendLine('    PROCEDURE EXPORT_ExportFullTable@1109900001(ExportToFilePath@1000000001 : Text[1024];ExportTableID@1000000004 : Integer;ExportWithTitleLine@1000000007 : Boolean;VAR ExportDuration@1000000003 : Duration;IsFieldTableExport@1000000010 : Boolean;UseBigText@1000000016 : Boolean;TableView@1000000011 : Text[1024]);');
        c.AppendLine('    VAR');
        c.AppendLine('      _Start@1000000000 : DateTime;');
        c.AppendLine('      _LastFieldNo@1000000002 : Integer;');
        c.AppendLine('      _ExportFieldBuffer@1000000005 : TEMPORARY Record 2000000041;');
        c.AppendLine('      _ExportRecRef@1000000006 : RecordRef;');
        c.AppendLine('      _NewFilePath@1000000008 : Text[1024];');
        c.AppendLine('      _FieldSeparator@1000000009 : Text[1];');
        c.AppendLine('      _Progress@1000000012 : Dialog;');
        c.AppendLine('      _TotalLines@1000000013 : Integer;');
        c.AppendLine('      _Step@1000000014 : Integer;');
        c.AppendLine('      _LastUpdate@1000000015 : DateTime;');
        c.AppendLine('    BEGIN');
        c.AppendLine('      CLEAR(ExportDuration);');
        c.AppendLine('');
        c.AppendLine('      IF ExportTableID = 0 THEN');
        c.AppendLine('       ERROR(''ExportTableID not defined'');');
        c.AppendLine('      IF ExportToFilePath = '''' THEN');
        c.AppendLine('        ERROR(''ExportToFilename not defined'');');
        c.AppendLine('      _FieldSeparator[1] := 9; // TAB');
        c.AppendLine('      _Start := CURRENTDATETIME;');
        c.AppendLine('');
        c.AppendLine('      EXPORT_InitADOStream;');
        c.AppendLine('      EXPORT_InitExportFieldBuffer(_ExportFieldBuffer,ExportTableID);');
        c.AppendLine('');
        c.AppendLine('      IF IsFieldTableExport THEN BEGIN');
        c.AppendLine('        _ExportFieldBuffer.INIT;');
        c.AppendLine('        _ExportFieldBuffer.TableNo := DATABASE::Field;');
        c.AppendLine('        _ExportFieldBuffer."No." := 50000;');
        c.AppendLine('        _ExportFieldBuffer.FieldName := ''Table Caption'';');
        c.AppendLine('        _ExportFieldBuffer."Field Caption" := ''Tabellenbezeichnung'';');
        c.AppendLine('        _ExportFieldBuffer.Type := _ExportFieldBuffer.Type::Text;');
        c.AppendLine('        _ExportFieldBuffer.Len := 250;');
        c.AppendLine('        _ExportFieldBuffer.INSERT;');
        c.AppendLine('');
        c.AppendLine('        _ExportFieldBuffer.INIT;');
        c.AppendLine('        _ExportFieldBuffer.TableNo := DATABASE::Field;');
        c.AppendLine('        _ExportFieldBuffer."No." := 50001;');
        c.AppendLine('        _ExportFieldBuffer.FieldName := ''Primary Key'';');
        c.AppendLine('        _ExportFieldBuffer."Field Caption" := ''Primï¿½rschlï¿½ssel'';');
        c.AppendLine('        _ExportFieldBuffer.Type := _ExportFieldBuffer.Type::Text;');
        c.AppendLine('        _ExportFieldBuffer.Len := 250;');
        c.AppendLine('        _ExportFieldBuffer.INSERT;');
        c.AppendLine('');
        c.AppendLine('        _ExportFieldBuffer.INIT;');
        c.AppendLine('        _ExportFieldBuffer.TableNo := DATABASE::Field;');
        c.AppendLine('        _ExportFieldBuffer."No." := 50002;');
        c.AppendLine('        _ExportFieldBuffer.FieldName := ''OptionString'';');
        c.AppendLine('        _ExportFieldBuffer.Type := _ExportFieldBuffer.Type::Text;');
        c.AppendLine('        _ExportFieldBuffer.Len := 250;');
        c.AppendLine('        _ExportFieldBuffer.INSERT;');
        c.AppendLine('');
        c.AppendLine('        _ExportFieldBuffer.INIT;');
        c.AppendLine('        _ExportFieldBuffer.TableNo := DATABASE::Field;');
        c.AppendLine('        _ExportFieldBuffer."No." := 50003;');
        c.AppendLine('        _ExportFieldBuffer.FieldName := ''OptionCaption'';');
        c.AppendLine('        _ExportFieldBuffer.Type := _ExportFieldBuffer.Type::Text;');
        c.AppendLine('        _ExportFieldBuffer.Len := 250;');
        c.AppendLine('        _ExportFieldBuffer.INSERT;');
        c.AppendLine('      END;');
        c.AppendLine('');
        c.AppendLine('      _ExportFieldBuffer.FINDLAST;');
        c.AppendLine('      _LastFieldNo := _ExportFieldBuffer."No.";');
        c.AppendLine('      _ExportRecRef.OPEN(ExportTableID,FALSE);');
        c.AppendLine('      _TotalLines := _ExportRecRef.COUNT;');
        c.AppendLine('      _Progress.OPEN(STRSUBSTNO(''Export %1\@@@@@@@@@@@@@@@@@@@@@@1@\Tabelle %2 - %3 Zeilen'',');
        c.AppendLine('                                 CONVERTSTR(ExportToFilePath,''\'',''/''),');
        c.AppendLine('                                 _ExportRecRef.CAPTION,');
        c.AppendLine('                                 _TotalLines));');
        c.AppendLine('');
        c.AppendLine('      IF TableView <> '''' THEN');
        c.AppendLine('        _ExportRecRef.SETVIEW(TableView);');
        c.AppendLine('      IF NOT _ExportRecRef.FINDSET(FALSE,FALSE) THEN EXIT;');
        c.AppendLine('      IF ExportWithTitleLine THEN');
        c.AppendLine('        EXPORT_CreateHeaderLine(_ExportFieldBuffer,_LastFieldNo,_FieldSeparator); // Header');
        c.AppendLine('      // Lines');
        c.AppendLine('      _LastUpdate := CURRENTDATETIME + 500;');
        c.AppendLine('      REPEAT');
        c.AppendLine('        IF UseBigText THEN BEGIN');
        c.AppendLine('          // Required for extra columns');
        c.AppendLine('          EXPORT_ExportSingleTableRecBT(_ExportRecRef,_ExportFieldBuffer,_LastFieldNo,_FieldSeparator);');
        c.AppendLine('        END ELSE BEGIN');
        c.AppendLine('          // Faster without BigText (BT)');
        c.AppendLine('          EXPORT_ExportSingleTableRec(_ExportRecRef,_ExportFieldBuffer,_LastFieldNo,_FieldSeparator);');
        c.AppendLine('        END;');
        c.AppendLine('');
        c.AppendLine('        _Step += 1;');
        c.AppendLine('        IF ABS(CURRENTDATETIME-_LastUpdate) > 500 THEN BEGIN');
        c.AppendLine('          _Progress.UPDATE(1,(10000*(_Step/_TotalLines)) DIV 1);');
        c.AppendLine('          _LastUpdate := CURRENTDATETIME;');
        c.AppendLine('        END;');
        c.AppendLine('      UNTIL _ExportRecRef.NEXT = 0;');
        c.AppendLine('');
        c.AppendLine('      ADOStream.SaveToFile(ExportToFilePath,2); // 2- Overwrite, 1- Default');
        c.AppendLine('      ADOStream.Close;');
        c.AppendLine('      CLEAR(ADOStream);');
        c.AppendLine('');
        c.AppendLine('      ExportDuration := CURRENTDATETIME - _Start;');
        c.AppendLine('');
        c.AppendLine('      _Progress.CLOSE;');
        c.AppendLine('    END;');
        c.AppendLine('');
        c.AppendLine('    PROCEDURE EXPORT_ExportSingleTableRec@1000000014(VAR _RecRef@1000000000 : RecordRef;VAR _ExportFieldBuffer@1000000002 : TEMPORARY Record 2000000041;_LastFieldNo@1000000001 : Integer;_FieldSeparator@1000000004 : Text[1]);');
        c.AppendLine('    VAR');
        c.AppendLine('      _ValueAsText@1000000003 : Text[1024];');
        c.AppendLine('      _CurrTableRef@1000000005 : RecordRef;');
        c.AppendLine('      _CurrFldRef@1000000009 : FieldRef;');
        c.AppendLine('      _Field@1000000010 : Record 2000000041;');
        c.AppendLine('      _TableNo@1000000006 : Integer;');
        c.AppendLine('      _FieldNo@1000000008 : Integer;');
        c.AppendLine('      _LineText@1000000007 : Text[1024];');
        c.AppendLine('    BEGIN');
        c.AppendLine('      //IF IsExportAllowed(ExportRecRef) THEN BEGIN');
        c.AppendLine('        _ExportFieldBuffer.FINDSET;');
        c.AppendLine('        REPEAT');
        c.AppendLine('          CLEAR(_ValueAsText);');
        c.AppendLine('          // Format Field in XML Format, Zero numbers are empty (Save Space)');
        c.AppendLine('          CASE TRUE OF');
        c.AppendLine('            (_ExportFieldBuffer.TableNo = DATABASE::Field) AND (_ExportFieldBuffer."No."=50000): BEGIN');
        c.AppendLine('              CLEAR(_CurrTableRef);');
        c.AppendLine('              _TableNo := _RecRef.FIELD(1).VALUE;');
        c.AppendLine('              _CurrTableRef.OPEN(_TableNo,FALSE);');
        c.AppendLine('              _ValueAsText := _CurrTableRef.CAPTION;');
        c.AppendLine('            END;');
        c.AppendLine('            (_ExportFieldBuffer.TableNo = DATABASE::Field) AND (_ExportFieldBuffer."No."=50001): BEGIN');
        c.AppendLine('              _TableNo := _RecRef.FIELD(1).VALUE;');
        c.AppendLine('              CLEAR(_CurrTableRef);');
        c.AppendLine('              _CurrTableRef.OPEN(_TableNo,FALSE);');
        c.AppendLine('              _ValueAsText := GetTextListOfKeyFieldIDs(_CurrTableRef.NUMBER);');
        c.AppendLine('            END;');
        c.AppendLine('            //OptionString');
        c.AppendLine('            (_ExportFieldBuffer.TableNo = DATABASE::Field) AND (_ExportFieldBuffer."No."=50002): BEGIN');
        c.AppendLine('              _RecRef.SETTABLE(_Field);');
        c.AppendLine('              IF _Field.Type = _Field.Type::Option THEN BEGIN');
        c.AppendLine('                CLEAR(_CurrTableRef);');
        c.AppendLine('                _CurrTableRef.OPEN(_Field.TableNo,FALSE);');
        c.AppendLine('                _CurrFldRef := _CurrTableRef.FIELD(_Field."No.");');
        c.AppendLine('                GetTextListOfOptionString(_CurrFldRef,_ValueAsText);');
        c.AppendLine('              END;');
        c.AppendLine('            END;');
        c.AppendLine('            (_ExportFieldBuffer.TableNo = DATABASE::Field) AND (_ExportFieldBuffer."No."=50003): BEGIN');
        c.AppendLine('              _RecRef.SETTABLE(_Field);');
        c.AppendLine('              IF _Field.Type = _Field.Type::Option THEN BEGIN');
        c.AppendLine('                CLEAR(_CurrTableRef);');
        c.AppendLine('                _CurrTableRef.OPEN(_Field.TableNo,FALSE);');
        c.AppendLine('                _CurrFldRef := _CurrTableRef.FIELD(_Field."No.");');
        c.AppendLine('                //mask leading "');
        c.AppendLine('                IF (STRLEN(_CurrFldRef.OPTIONCAPTION)>1) AND (COPYSTR(_CurrFldRef.OPTIONCAPTION,1,2)='' ,'') THEN BEGIN');
        c.AppendLine('                  _ValueAsText := ''" "''+COPYSTR(_CurrFldRef.OPTIONCAPTION,2);');
        c.AppendLine('                END ELSE BEGIN');
        c.AppendLine('                  _ValueAsText := _CurrFldRef.OPTIONCAPTION;');
        c.AppendLine('                END;');
        c.AppendLine('              END;');
        c.AppendLine('            END;');
        c.AppendLine('            ELSE _ValueAsText := EXPORT_FormatFieldValue(_RecRef,_ExportFieldBuffer."No.");');
        c.AppendLine('          END; // END_CASE');
        c.AppendLine('');
        c.AppendLine('          // Remove FieldSeparator from Value');
        c.AppendLine('          //_ValueAsText := ReplaceStr(_ValueAsText,_FieldSeparator,'''');');
        c.AppendLine('          RemoveSpecialChars(_ValueAsText);');
        c.AppendLine('          ADOStream.WriteText(_ValueAsText,0{LineBreak});');
        c.AppendLine('          IF _LastFieldNo = _ExportFieldBuffer."No." THEN');
        c.AppendLine('                ADOStream.WriteText('''',1{LineBreak})');
        c.AppendLine('          ELSE');
        c.AppendLine('                ADOStream.WriteText(_FieldSeparator,0);');
        c.AppendLine('');
        c.AppendLine('        UNTIL _ExportFieldBuffer.NEXT = 0;');
        c.AppendLine('    END;');
        c.AppendLine('');
        c.AppendLine('    PROCEDURE EXPORT_ExportSingleTableRecBT@1000000017(VAR _RecRef@1000000000 : RecordRef;VAR _ExportFieldBuffer@1000000002 : TEMPORARY Record 2000000041;_LastFieldNo@1000000001 : Integer;_FieldSeparator@1000000004 : Text[1]);');
        c.AppendLine('    VAR');
        c.AppendLine('      _ValueAsText@1000000003 : BigText;');
        c.AppendLine('      _CurrTableRef@1000000005 : RecordRef;');
        c.AppendLine('      _CurrFldRef@1000000009 : FieldRef;');
        c.AppendLine('      _Field@1000000010 : Record 2000000041;');
        c.AppendLine('      _TableNo@1000000006 : Integer;');
        c.AppendLine('      _FieldNo@1000000008 : Integer;');
        c.AppendLine('      _LineText@1000000007 : Text[1024];');
        c.AppendLine('    BEGIN');
        c.AppendLine('      //IF IsExportAllowed(ExportRecRef) THEN BEGIN');
        c.AppendLine('        _ExportFieldBuffer.FINDSET;');
        c.AppendLine('        REPEAT');
        c.AppendLine('          CLEAR(_ValueAsText);');
        c.AppendLine('          // Format Field in XML Format, Zero numbers are empty (Save Space)');
        c.AppendLine('          CASE TRUE OF');
        c.AppendLine('            (_ExportFieldBuffer.TableNo = DATABASE::Field) AND (_ExportFieldBuffer."No."=50000): BEGIN');
        c.AppendLine('              CLEAR(_CurrTableRef);');
        c.AppendLine('              _TableNo := _RecRef.FIELD(1).VALUE;');
        c.AppendLine('              _CurrTableRef.OPEN(_TableNo,FALSE);');
        c.AppendLine('              _ValueAsText.ADDTEXT(_CurrTableRef.CAPTION);');
        c.AppendLine('            END;');
        c.AppendLine('            (_ExportFieldBuffer.TableNo = DATABASE::Field) AND (_ExportFieldBuffer."No."=50001): BEGIN');
        c.AppendLine('              _TableNo := _RecRef.FIELD(1).VALUE;');
        c.AppendLine('              CLEAR(_CurrTableRef);');
        c.AppendLine('              _CurrTableRef.OPEN(_TableNo,FALSE);');
        c.AppendLine('              _ValueAsText.ADDTEXT(GetTextListOfKeyFieldIDs(_CurrTableRef.NUMBER));');
        c.AppendLine('            END;');
        c.AppendLine('            //OptionString');
        c.AppendLine('            (_ExportFieldBuffer.TableNo = DATABASE::Field) AND (_ExportFieldBuffer."No."=50002): BEGIN');
        c.AppendLine('              _RecRef.SETTABLE(_Field);');
        c.AppendLine('              IF _Field.Type = _Field.Type::Option THEN BEGIN');
        c.AppendLine('                CLEAR(_CurrTableRef);');
        c.AppendLine('                _CurrTableRef.OPEN(_Field.TableNo,FALSE);');
        c.AppendLine('                _CurrFldRef := _CurrTableRef.FIELD(_Field."No.");');
        c.AppendLine('                GetTextListOfOptionStringBT(_CurrFldRef,_ValueAsText);');
        c.AppendLine('              END;');
        c.AppendLine('            END;');
        c.AppendLine('            (_ExportFieldBuffer.TableNo = DATABASE::Field) AND (_ExportFieldBuffer."No."=50003): BEGIN');
        c.AppendLine('              _RecRef.SETTABLE(_Field);');
        c.AppendLine('              IF _Field.Type = _Field.Type::Option THEN BEGIN');
        c.AppendLine('                CLEAR(_CurrTableRef);');
        c.AppendLine('                _CurrTableRef.OPEN(_Field.TableNo,FALSE);');
        c.AppendLine('                _CurrFldRef := _CurrTableRef.FIELD(_Field."No.");');
        c.AppendLine('                //mask leading "');
        c.AppendLine('                IF (STRLEN(_CurrFldRef.OPTIONCAPTION)>1) AND (COPYSTR(_CurrFldRef.OPTIONCAPTION,1,2)='' ,'') THEN BEGIN');
        c.AppendLine('                  _ValueAsText.ADDTEXT(''" "''+COPYSTR(_CurrFldRef.OPTIONCAPTION,2));');
        c.AppendLine('                END ELSE BEGIN');
        c.AppendLine('                  _ValueAsText.ADDTEXT(_CurrFldRef.OPTIONCAPTION);');
        c.AppendLine('                END;');
        c.AppendLine('              END;');
        c.AppendLine('            END;');
        c.AppendLine('            ELSE _ValueAsText.ADDTEXT(EXPORT_FormatFieldValue(_RecRef,_ExportFieldBuffer."No."));');
        c.AppendLine('          END; // END_CASE');
        c.AppendLine('');
        c.AppendLine('          // Remove FieldSeparator from Value');
        c.AppendLine('          //_ValueAsText := ReplaceStr(_ValueAsText,_FieldSeparator,'''');');
        c.AppendLine('          RemoveSpecialCharsBT(_ValueAsText);');
        c.AppendLine('          AddBigTextToADOStream(_ValueAsText);');
        c.AppendLine('          IF _LastFieldNo = _ExportFieldBuffer."No." THEN');
        c.AppendLine('                ADOStream.WriteText('''',1{LineBreak})');
        c.AppendLine('          ELSE');
        c.AppendLine('                ADOStream.WriteText(_FieldSeparator,0);');
        c.AppendLine('');
        c.AppendLine('        UNTIL _ExportFieldBuffer.NEXT = 0;');
        c.AppendLine('    END;');
        c.AppendLine('');
        c.AppendLine('    PROCEDURE EXPORT_CreateHeaderLine@1000000013(VAR _ExportFieldBuffer@1000000001 : TEMPORARY Record 2000000041;_LastFieldNo@1000000000 : Integer;_FieldSeparator@1000000003 : Text[1]);');
        c.AppendLine('    VAR');
        c.AppendLine('      _ValueAsText@1000000002 : Text[1024];');
        c.AppendLine('    BEGIN');
        c.AppendLine('      _ExportFieldBuffer.FINDSET;');
        c.AppendLine('      REPEAT');
        c.AppendLine('        _ValueAsText := ReplaceStr(_ExportFieldBuffer.FieldName,_FieldSeparator,'''');  // Remove FieldSeparator from Value');
        c.AppendLine('        IF _LastFieldNo <> _ExportFieldBuffer."No." THEN');
        c.AppendLine('          ADOStream.WriteText(_ValueAsText + _FieldSeparator,0)  // Write');
        c.AppendLine('        ELSE');
        c.AppendLine('          ADOStream.WriteText(_ValueAsText + _FieldSeparator,1); // Write with LineBreak');
        c.AppendLine('      UNTIL _ExportFieldBuffer.NEXT = 0;');
        c.AppendLine('    END;');
        c.AppendLine('');
        c.AppendLine('    PROCEDURE EXPORT_InitADOStream@1000000012();');
        c.AppendLine('    BEGIN');
        c.AppendLine('      CLEAR(ADOStream);');
        c.AppendLine('      CREATE(ADOStream);');
        c.AppendLine('      // [LINEFieldSeparatorENUM LineFieldSeparator]');
        c.AppendLine('      // adCR    13  Indicates carriage return.');
        c.AppendLine('      // adCRLF  -1  Default. Indicates carriage return line feed.');
        c.AppendLine('      // adLF    10  Indicates line feed.');
        c.AppendLine('      ADOStream.LineSeparator(-1);');
        c.AppendLine('');
        c.AppendLine('      ADOStream.Open;');
        c.AppendLine('      //ADOStream.Charset(''iso-8859-1''); //UTF-8, default is unicode');
        c.AppendLine('    END;');
        c.AppendLine('');
        c.AppendLine('    PROCEDURE EXPORT_InitExportFieldBuffer@1000000011(VAR _ExportFieldsFOUND@1000000001 : TEMPORARY Record 2000000041;_ExportTableID@1000000003 : Integer);');
        c.AppendLine('    VAR');
        c.AppendLine('      _Fields@1000000000 : Record 2000000041;');
        c.AppendLine('      _ExportFieldBuffer@1000000002 : TEMPORARY Record 2000000041;');
        c.AppendLine('    BEGIN');
        c.AppendLine('      IF _ExportTableID <> 0 THEN');
        c.AppendLine('        _Fields.SETRANGE(TableNo,_ExportTableID);');
        c.AppendLine('      _Fields.SETFILTER(Type,''<>%1'',_Fields.Type::BLOB);');
        c.AppendLine('      _Fields.SETRANGE(Class,_Fields.Class::Normal);');
        c.AppendLine('      _Fields.SETRANGE(Enabled,TRUE);');
        c.AppendLine('      _Fields.FINDSET;');
        c.AppendLine('      REPEAT');
        c.AppendLine('        _ExportFieldBuffer := _Fields;');
        c.AppendLine('        _ExportFieldBuffer.INSERT;');
        c.AppendLine('      UNTIL _Fields.NEXT = 0;');
        c.AppendLine('      _ExportFieldsFOUND.COPY(_ExportFieldBuffer,TRUE);');
        c.AppendLine('    END;');
        c.AppendLine('');
        c.AppendLine('    PROCEDURE EXPORT_FormatFieldValue@1000000010(VAR _RecRef@1000000008 : RecordRef;_FieldNo@1000000009 : Integer) _Result : Text[1024];');
        c.AppendLine('    VAR');
        c.AppendLine('      _FieldRef@1000000000 : FieldRef;');
        c.AppendLine('      _Value@1000000007 : Variant;');
        c.AppendLine('      _Integer@1000000002 : Integer;');
        c.AppendLine('      _Text@1000000003 : Text[1024];');
        c.AppendLine('      _Decimal@1000000004 : Decimal;');
        c.AppendLine('      _Date@1000000005 : Date;');
        c.AppendLine('      _Time@1000000001 : Time;');
        c.AppendLine('      _Boolean@1000000006 : Boolean;');
        c.AppendLine('      _Field@1000000010 : Record 2000000041;');
        c.AppendLine('    BEGIN');
        c.AppendLine('      //* DATENTYP-MAPPING UM FORMAT-ANWEISUNG IM CODE ZU MINIMIEREN');
        c.AppendLine('      _FieldRef := _RecRef.FIELD(_FieldNo);');
        c.AppendLine('      _FieldRef.VALUE := _FieldRef.VALUE;');
        c.AppendLine('      CASE UPPERCASE(FORMAT(_FieldRef.TYPE)) OF');
        c.AppendLine('        ''BOOLEAN'': BEGIN; _Boolean := _FieldRef.VALUE; _Result  := ''0'';   IF _Boolean THEN      _Result := ''1''; END;');
        c.AppendLine('        ''INTEGER'': BEGIN; _Integer := _FieldRef.VALUE; IF _Integer <> 0 THEN _Result := FORMAT(_Integer,0,9); END;');
        c.AppendLine('        ''OPTION'':  BEGIN; _Integer := _FieldRef.VALUE; _Result := FORMAT(_Integer,0,9); END;');
        c.AppendLine('        ''DECIMAL'': BEGIN; _Decimal := _FieldRef.VALUE; IF _Decimal <> 0 THEN _Result := FORMAT(_Decimal,0,9); END;');
        c.AppendLine('        ''DATE'':    BEGIN; _Date    := _FieldRef.VALUE; IF _Date <> 0D THEN   _Result := FORMAT(_Date,0,9);    END;');
        c.AppendLine('        ''TIME'':    BEGIN; _Time := _FieldRef.VALUE;    IF _Time <> 0T THEN   _Result := FORMAT(_Time,0,9);    END;');
        c.AppendLine('        ''CHAR'',''TEXT'',''CODE'':   _Result := _FieldRef.VALUE;');
        c.AppendLine('        ELSE _Result := FORMAT(_FieldRef.VALUE,0,9);');
        c.AppendLine('      END; // END_CASE');
        c.AppendLine('');
        c.AppendLine('      IF (_RecRef.NUMBER = DATABASE::Field) AND (UPPERCASE(FORMAT(_FieldRef.TYPE)) = ''OPTION'')THEN BEGIN');
        c.AppendLine('        _RecRef.SETTABLE(_Field);');
        c.AppendLine('        IF (_FieldRef.NUMBER=_Field.FIELDNO(Type)) THEN');
        c.AppendLine('          CASE _Field.Type OF');
        c.AppendLine('            _Field.Type::TableFilter: _Result := ''0'';');
        c.AppendLine('            _Field.Type::RecordID   : _Result := ''1'';');
        c.AppendLine('            _Field.Type::Text       : _Result := ''2'';');
        c.AppendLine('            _Field.Type::Date       : _Result := ''3'';');
        c.AppendLine('            _Field.Type::Time       : _Result := ''4'';');
        c.AppendLine('            _Field.Type::DateFormula: _Result := ''5'';');
        c.AppendLine('            _Field.Type::Decimal    : _Result := ''6'';');
        c.AppendLine('            _Field.Type::Binary     : _Result := ''7'';');
        c.AppendLine('            _Field.Type::BLOB       : _Result := ''8'';');
        c.AppendLine('            _Field.Type::Boolean    : _Result := ''9'';');
        c.AppendLine('            _Field.Type::Integer    : _Result := ''10'';');
        c.AppendLine('            _Field.Type::Code       : _Result := ''11'';');
        c.AppendLine('            _Field.Type::Option     : _Result := ''12'';');
        c.AppendLine('            _Field.Type::BigInteger : _Result := ''13'';');
        c.AppendLine('            _Field.Type::Duration   : _Result := ''14'';');
        c.AppendLine('            _Field.Type::GUID       : _Result := ''15'';');
        c.AppendLine('            _Field.Type::DateTime   : _Result := ''16'';');
        c.AppendLine('          END;');
        c.AppendLine('      END;');
        c.AppendLine('    END;');
        c.AppendLine('');
        c.AppendLine('    PROCEDURE ReplaceStr@1000000015(_Text@1000000000 : Text[1024];_FindWhat@1000000001 : Text[1024];_ReplaceWith@1000000002 : Text[1024]) _NewText : Text[1024];');
        c.AppendLine('    BEGIN');
        c.AppendLine('      WHILE STRPOS(_Text,_FindWhat) > 0 DO');
        c.AppendLine('        _Text := DELSTR(_Text,STRPOS(_Text,_FindWhat)) +');
        c.AppendLine('                  _ReplaceWith +');
        c.AppendLine('                  COPYSTR(_Text,STRPOS(_Text,_FindWhat)+STRLEN(_FindWhat));');
        c.AppendLine('      _NewText := _Text;');
        c.AppendLine('    END;');
        c.AppendLine('');
        c.AppendLine('    PROCEDURE GetTextListOfKeyFieldIDs@1109900003(TableNo@1109900000 : Integer) KeyFieldsList : Text[1024];');
        c.AppendLine('    VAR');
        c.AppendLine('      Key@1109900001 : Record 2000000063;');
        c.AppendLine('      RecRef@1000000001 : RecordRef;');
        c.AppendLine('      KeyRef@1000000002 : KeyRef;');
        c.AppendLine('      FldRef@1000000003 : FieldRef;');
        c.AppendLine('      i@1000000004 : Integer;');
        c.AppendLine('    BEGIN');
        c.AppendLine('      RecRef.OPEN(TableNo);');
        c.AppendLine('      KeyRef := RecRef.KEYINDEX(1);');
        c.AppendLine('      FOR i := 1 TO KeyRef.FIELDCOUNT DO BEGIN');
        c.AppendLine('        FldRef := KeyRef.FIELDINDEX(i);');
        c.AppendLine('        KeyFieldsList += FORMAT(FldRef.NUMBER) + '','';');
        c.AppendLine('      END;');
        c.AppendLine('      KeyFieldsList := DELCHR(KeyFieldsList,''>'','','');');
        c.AppendLine('    END;');
        c.AppendLine('');
        c.AppendLine('    PROCEDURE RemoveSpecialChars@1109900000(VAR Text@1109900000 : Text[1024]);');
        c.AppendLine('    VAR');
        c.AppendLine('      CharArray@1109900001 : Text[30];');
        c.AppendLine('      Chunk@1000000000 : Text[1];');
        c.AppendLine('      TextOLD@1000000001 : BigText;');
        c.AppendLine('      i@1000000002 : Integer;');
        c.AppendLine('    BEGIN');
        c.AppendLine('      CharArray[1] := 9; // TAB');
        c.AppendLine('      CharArray[2] := 10; // LF');
        c.AppendLine('      CharArray[3] := 13; // CR');
        c.AppendLine('      Text := DELCHR(Text,''='',CharArray);');
        c.AppendLine('    END;');
        c.AppendLine('');
        c.AppendLine('    PROCEDURE RemoveSpecialCharsBT@1000000022(VAR Text@1109900000 : BigText);');
        c.AppendLine('    VAR');
        c.AppendLine('      CharArray@1109900001 : Text[30];');
        c.AppendLine('      Chunk@1000000000 : Text[1];');
        c.AppendLine('      TextOLD@1000000001 : BigText;');
        c.AppendLine('      i@1000000002 : Integer;');
        c.AppendLine('    BEGIN');
        c.AppendLine('      CharArray[1] := 9; // TAB');
        c.AppendLine('      CharArray[2] := 10; // LF');
        c.AppendLine('      CharArray[3] := 13; // CR');
        c.AppendLine('      Text.GETSUBTEXT(TextOLD,1,Text.LENGTH);');
        c.AppendLine('      CLEAR(Text);');
        c.AppendLine('      FOR i:=1 TO TextOLD.LENGTH DO BEGIN');
        c.AppendLine('        TextOLD.GETSUBTEXT(Chunk,i,1);');
        c.AppendLine('        Text.ADDTEXT(DELCHR(Chunk, ''='', CharArray));');
        c.AppendLine('      END;');
        c.AppendLine('    END;');
        c.AppendLine('');
        c.AppendLine('    PROCEDURE GetTextListOfOptionString@1000000032(_FieldRef@1000000000 : FieldRef;VAR _Result@1000000006 : Text[1024]);');
        c.AppendLine('    VAR');
        c.AppendLine('      Letters@1000000005 : TextConst ''DEU=abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'';');
        c.AppendLine('      _OptionCounter@1000000001 : Integer;');
        c.AppendLine('      _OptionString@1000000002 : Text[1024];');
        c.AppendLine('      i@1000000003 : Integer;');
        c.AppendLine('      _OptionElement@1000000004 : Text[1024];');
        c.AppendLine('      _SubStr@1000000007 : Text[30];');
        c.AppendLine('    BEGIN');
        c.AppendLine('      _OptionString := _FieldRef.OPTIONSTRING;');
        c.AppendLine('      _OptionCounter := 1;');
        c.AppendLine('      FOR i := 1 TO STRLEN(_OptionString) DO BEGIN');
        c.AppendLine('        IF _OptionString[i] = '','' THEN');
        c.AppendLine('          _OptionCounter += 1;');
        c.AppendLine('      END;');
        c.AppendLine('');
        c.AppendLine('      FOR i := 1 TO _OptionCounter DO BEGIN');
        c.AppendLine('        _OptionElement := SELECTSTR(i,_OptionString);');
        c.AppendLine('        IF ContainsOnlyLetters(_OptionElement) THEN BEGIN');
        c.AppendLine('          _Result += STRSUBSTNO(''%1,'',_OptionElement);');
        c.AppendLine('        END ELSE BEGIN');
        c.AppendLine('          _Result += STRSUBSTNO(''"%1",'',_OptionElement);');
        c.AppendLine('        END;');
        c.AppendLine('      END;');
        c.AppendLine('      IF STRLEN(_Result) > 0 THEN');
        c.AppendLine('        _Result := DELCHR(_Result,''>'','','');');
        c.AppendLine('    END;');
        c.AppendLine('');
        c.AppendLine('    PROCEDURE GetTextListOfOptionStringBT@1000000021(_FieldRef@1000000000 : FieldRef;VAR _Result@1000000006 : BigText);');
        c.AppendLine('    VAR');
        c.AppendLine('      Letters@1000000005 : TextConst ''DEU=abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'';');
        c.AppendLine('      _OptionCounter@1000000001 : Integer;');
        c.AppendLine('      _OptionString@1000000002 : Text[1024];');
        c.AppendLine('      i@1000000003 : Integer;');
        c.AppendLine('      _OptionElement@1000000004 : Text[1024];');
        c.AppendLine('      _SubStr@1000000007 : Text[30];');
        c.AppendLine('    BEGIN');
        c.AppendLine('      _OptionString := _FieldRef.OPTIONSTRING;');
        c.AppendLine('      _OptionCounter := 1;');
        c.AppendLine('      FOR i := 1 TO STRLEN(_OptionString) DO BEGIN');
        c.AppendLine('        IF _OptionString[i] = '','' THEN');
        c.AppendLine('          _OptionCounter += 1;');
        c.AppendLine('      END;');
        c.AppendLine('');
        c.AppendLine('      FOR i := 1 TO _OptionCounter DO BEGIN');
        c.AppendLine('        _OptionElement := SELECTSTR(i,_OptionString);');
        c.AppendLine('        IF ContainsOnlyLetters(_OptionElement) THEN BEGIN');
        c.AppendLine('          _Result.ADDTEXT(STRSUBSTNO(''%1,'',_OptionElement));');
        c.AppendLine('        END ELSE BEGIN');
        c.AppendLine('          _Result.ADDTEXT(STRSUBSTNO(''"%1",'',_OptionElement));');
        c.AppendLine('        END;');
        c.AppendLine('      END;');
        c.AppendLine('      IF _Result.LENGTH > 0 THEN');
        c.AppendLine('        _Result.GETSUBTEXT(_SubStr,_Result.LENGTH,1);');
        c.AppendLine('      IF _SubStr = '','' THEN');
        c.AppendLine('        _Result.GETSUBTEXT(_Result,1,_Result.LENGTH-1);');
        c.AppendLine('    END;');
        c.AppendLine('');
        c.AppendLine('    PROCEDURE ContainsOnlyLetters@1000000033(String@1000000000 : Text[1024]) : Boolean;');
        c.AppendLine('    VAR');
        c.AppendLine('      Letters@1000000001 : TextConst ''DEU=abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'';');
        c.AppendLine('    BEGIN');
        c.AppendLine('      EXIT(DELCHR(String,''='',Letters) = '''');');
        c.AppendLine('    END;');
        c.AppendLine('');
        c.AppendLine('    PROCEDURE AddBigTextToADOStream@1000000020(Content@1000000000 : BigText);');
        c.AppendLine('    VAR');
        c.AppendLine('      Pos@1000000002 : Integer;');
        c.AppendLine('      Chunk@1000000001 : Text[1024];');
        c.AppendLine('    BEGIN');
        c.AppendLine('      Pos:=1;');
        c.AppendLine('      WHILE Pos <= Content.LENGTH DO BEGIN');
        c.AppendLine('        Pos += Content.GETSUBTEXT(Chunk,Pos,1024);');
        c.AppendLine('        ADOStream.WriteText(Chunk,0{LineBreak});');
        c.AppendLine('      END;');
        c.AppendLine('    END;');
        c.AppendLine('');
        c.AppendLine('    PROCEDURE IsTableInLicense@1000000018(ObjectID@1000000000 : Integer) : Boolean;');
        c.AppendLine('    VAR');
        c.AppendLine('      _LicensePermission@1000000001 : Record 2000000043;');
        c.AppendLine('    BEGIN');
        c.AppendLine('      IF NOT _LicensePermission.GET(_LicensePermission."Object Type"::Table,ObjectID) THEN');
        c.AppendLine('        EXIT(FALSE);');
        c.AppendLine('      EXIT(_LicensePermission."Execute Permission"<>_LicensePermission."Execute Permission"::" ");');
        c.AppendLine('    END;');
        c.AppendLine('');
        c.AppendLine('    BEGIN');
        c.AppendLine('    END.');
        c.AppendLine('  }');
        c.AppendLine('}');
    end;

    procedure CreateALXMLPort(DAMTable: Record DAMTable) C: TextBuilder
    var
        DAMFieldBuffer: Record DAMFieldBuffer;
    begin
        DAMTable.Testfield("Import XMLPort ID");
        DAMTable.Testfield("Old Version Table ID");

        C.AppendLine('xmlport ' + format(DAMTable."Import XMLPort ID") + ' T' + format(DAMTable."Old Version Table ID") + 'Import');
        C.AppendLine('{');
        C.AppendLine('    Caption = ''' + DAMTable."Old Version Table Caption" + ''';');
        C.AppendLine('    Direction = Import;');
        C.AppendLine('    FieldSeparator = ''<TAB>'';');
        C.AppendLine('    FieldDelimiter = ''<None>'';');
        C.AppendLine('    TextEncoding = UTF16;');
        C.AppendLine('    Format = VariableText;');
        C.AppendLine('    FormatEvaluate = Xml;');
        C.AppendLine('');
        C.AppendLine('    schema');
        C.AppendLine('    {');
        C.AppendLine('        textelement(Root)');
        C.AppendLine('        {');

        IF FilterFields(DAMFieldBuffer, DAMTable."Old Version Table ID", FALSE, FALSE, FALSE) THEN BEGIN
            C.AppendLine('            tableelement(' + GetCleanTableName(DAMFieldBuffer) + '; ' + STRSUBSTNO('T%1Buffer', DAMTable."Old Version Table ID") + ')');
            C.AppendLine('            {');
            C.AppendLine('                XmlName = ''' + GetCleanTableName(DAMFieldBuffer) + ''';');
            DAMFieldBuffer.FINDSET();
            REPEAT
                C.AppendLine('                fieldelement("' + GetCleanFieldName(DAMFieldBuffer) + '"; ' + GetCleanTableName(DAMFieldBuffer) + '."' + DAMFieldBuffer.FieldName + '") { FieldValidate = No; MinOccurs = Zero; }');
            UNTIL DAMFieldBuffer.NEXT() = 0;
        END;

        C.AppendLine('                trigger OnBeforeInsertRecord()');
        C.AppendLine('                begin');
        C.AppendLine('                    ReceivedLinesCount += 1;');
        C.AppendLine('');
        C.AppendLine('                    //SKIP HEADER LINES');
        C.AppendLine('                    IF ReceivedLinesCount <= StartFromLine then');
        C.AppendLine('                        currXMLport.SKIP();');
        C.AppendLine('                end;');
        C.AppendLine('            }');
        C.AppendLine('        }');
        C.AppendLine('    }');
        C.AppendLine('');
        C.AppendLine('    requestpage');
        C.AppendLine('    {');
        C.AppendLine('        layout');
        C.AppendLine('        {');
        C.AppendLine('            area(content)');
        C.AppendLine('            {');
        C.AppendLine('                group(Umgebung)');
        C.AppendLine('                {');
        C.AppendLine('                    Caption = ''Environment'';');
        C.AppendLine('                    field(DatabaseName; GetDatabaseName()) { Caption = ''Database''; ApplicationArea = all; }');
        C.AppendLine('                    field(COMPANYNAME; COMPANYNAME) { Caption = ''Company''; ApplicationArea = all; }');
        C.AppendLine('                }');
        C.AppendLine('            }');
        C.AppendLine('        }');
        C.AppendLine('    }');
        C.AppendLine('');
        C.AppendLine('    trigger OnPostXmlPort()');
        C.AppendLine('    var');
        C.AppendLine('        LinesProcessedMsg: Label ''%1 Buffer\%2 lines imported'';');
        C.AppendLine('    begin');
        C.AppendLine('        IF currXMLport.FILENAME <> '''' then //only for manual excecution');
        C.AppendLine('            MESSAGE(LinesProcessedMsg, ' + GetCleanTableName(DAMFieldBuffer) + '.TABLECAPTION, ReceivedLinesCount);');
        C.AppendLine('    end;');
        C.AppendLine('');
        C.AppendLine('    trigger OnPreXmlPort()');
        C.AppendLine('    begin');
        C.AppendLine('        ClearBufferBeforeImportTable(' + GetCleanTableName(DAMFieldBuffer) + '.RECORDID.TABLENO);');
        C.AppendLine('    end;');
        C.AppendLine('');
        C.AppendLine('    var');
        C.AppendLine('        ReceivedLinesCount: Integer;');
        C.AppendLine('        StartFromLine: Integer;');
        C.AppendLine('');
        C.AppendLine('    procedure GetFieldCaption(_TableNo: Integer;');
        C.AppendLine('    _FieldNo: Integer) _FieldCpt: Text[1024]');
        C.AppendLine('    var');
        C.AppendLine('        _Field: Record "Field";');
        C.AppendLine('    begin');
        C.AppendLine('        IF _TableNo = 0 then exit('''');');
        C.AppendLine('        IF _FieldNo = 0 then exit('''');');
        C.AppendLine('        IF NOT _Field.GET(_TableNo, _FieldNo) then exit('''');');
        C.AppendLine('        _FieldCpt := _Field."Field Caption";');
        C.AppendLine('    end;');
        C.AppendLine('');
        C.AppendLine('    procedure RemoveSpecialChars(TextIn: Text[1024]) TextOut: Text[1024]');
        C.AppendLine('    var');
        C.AppendLine('        CharArray: Text[30];');
        C.AppendLine('    begin');
        C.AppendLine('        CharArray[1] := 9; // TAB');
        C.AppendLine('        CharArray[2] := 10; // LF');
        C.AppendLine('        CharArray[3] := 13; // CR');
        C.AppendLine('        exit(DELCHR(TextIn, ''='', CharArray));');
        C.AppendLine('    end;');
        C.AppendLine('');
        C.AppendLine('    local procedure ClearBufferBeforeImportTable(BufferTableNo: Integer)');
        C.AppendLine('    var');
        C.AppendLine('        BufferRef: RecordRef;');
        C.AppendLine('    begin');
        C.AppendLine('        //* Puffertabelle lâschen vor dem Import');
        C.AppendLine('        IF NOT currXMLport.IMPORTFILE then');
        C.AppendLine('            exit;');
        C.AppendLine('        IF BufferTableNo < 50000 then begin');
        C.AppendLine('            MESSAGE(''Achtung: Puffertabellen ID kleiner 50000'');');
        C.AppendLine('            exit;');
        C.AppendLine('        end;');
        C.AppendLine('        BufferRef.OPEN(BufferTableNo);');
        C.AppendLine('        IF NOT BufferRef.IsEmpty then');
        C.AppendLine('            BufferRef.DELETEALL();');
        C.AppendLine('    end;');
        C.AppendLine('');
        C.AppendLine('    procedure GetDatabaseName(): Text[250]');
        C.AppendLine('    var');
        C.AppendLine('        ActiveSession: Record "Active Session";');
        C.AppendLine('    begin');
        C.AppendLine('        ActiveSession.SETRANGE("Server Instance ID", SERVICEINSTANCEID());');
        C.AppendLine('        ActiveSession.SETRANGE("Session ID", SESSIONID());');
        C.AppendLine('        ActiveSession.findfirst();');
        C.AppendLine('        exit(ActiveSession."Database Name");');
        C.AppendLine('    end;');
        C.AppendLine('}');
    end;

    procedure CreateALTable(DAMTable: Record DAMTable) C: TextBuilder
    var
        DAMFieldBuffer: Record DAMFieldBuffer;
        _FieldTypeText: Text;
    begin
        DAMTable.testfield("Buffer Table ID");
        DAMTable.TestField("Old Version Table ID");
        FilterFields(DAMFieldBuffer, DAMTable."Old Version Table ID", FALSE, FALSE, FALSE);
        C.AppendLine('table ' + FORMAT(DAMTable."Buffer Table ID") + ' ' + STRSUBSTNO('T%1Buffer', DAMTable."Old Version Table ID"));
        C.AppendLine('{');
        C.AppendLine('    CaptionML= DEU = ''' + DAMTable."Old Version Table Caption" + '(DAM)' + ''', ENU = ''' + DAMFieldBuffer.TableName + '(DAM)' + ''';');
        C.AppendLine('  fields {');
        IF FilterFields(DAMFieldBuffer, DAMTable."Old Version Table ID", FALSE, FALSE, FALSE) THEN
            REPEAT
                CASE DAMFieldBuffer.Type OF
                    DAMFieldBuffer.Type::Code, DAMFieldBuffer.Type::Text:
                        _FieldTypeText := STRSUBSTNO('%1[%2]', DAMFieldBuffer.Type, DAMFieldBuffer.Len);
                    ELSE
                        _FieldTypeText := FORMAT(DAMFieldBuffer.Type);
                END;
                C.AppendLine(STRSUBSTNO('        field(%1; "%2"; %3)', DAMFieldBuffer."No.", DAMFieldBuffer.FieldName, _FieldTypeText));
                // field(1; "No."; Code[20])
                C.AppendLine('        {');
                C.AppendLine(STRSUBSTNO('            CaptionML = ENU = ''%1'', DEU = ''%2'';', DAMFieldBuffer.FieldName, DAMFieldBuffer."Field Caption"));

                IF DAMFieldBuffer.Type = DAMFieldBuffer.Type::Option THEN BEGIN
                    C.AppendLine('            OptionMembers = ' + DAMFieldBuffer.OPTIONSTRING + ';');
                    C.AppendLine(STRSUBSTNO('            OptionCaptionML = ENU = ''%1'', DEU = ''%2'';', DelChr(DAMFieldBuffer.OPTIONSTRING, '=', '"'), DelChr(DAMFieldBuffer.OPTIONCAPTION, '=', '"')));
                END;

                C.AppendLine('        }');

            UNTIL DAMFieldBuffer.NEXT() = 0;
        C.AppendLine('  }');
        C.AppendLine('    keys');
        C.AppendLine('    {');
        C.AppendLine('        key(Key1; ' + BuildKeyString(DAMTable."Old Version Table ID") + ')');
        C.AppendLine('        {');
        C.AppendLine('            Clustered = true;');
        C.AppendLine('        }');
        C.AppendLine('    }');
        C.AppendLine('');
        C.AppendLine('    fieldgroups');
        C.AppendLine('    {');
        C.AppendLine('    }');
        C.AppendLine('}');
    end;

    procedure DownloadFile(Content: TextBuilder; toFileName: text)
    var
        tempBlob: Codeunit "Temp Blob";
        iStr: InStream;
        allFilesTok: Label 'All Files (*.*)|*.*';
        oStr: OutStream;
    begin
        tempBlob.CreateOutStream(oStr);
        oStr.WriteText(Content.ToText());
        tempBlob.CreateInStream(iStr);
        DownloadFromStream(iStr, 'Download', 'ToFolder', allFilesTok, toFileName);
    end;

    procedure DownloadFileUTF8(Content: TextBuilder; toFileName: text)
    var
        tempBlob: Codeunit "Temp Blob";
        iStr: InStream;
        allFilesTok: Label 'All Files (*.*)|*.*';
        oStr: OutStream;
        DefaultEncoding: TextEncoding;
    begin
        DefaultEncoding := TextEncoding::Windows;
        tempBlob.CreateOutStream(oStr, DefaultEncoding);
        oStr.WriteText(Content.ToText());
        tempBlob.CreateInStream(iStr, DefaultEncoding);
        DownloadFromStream(iStr, 'Download', 'ToFolder', allFilesTok, toFileName);
    end;


    local procedure GetCleanFieldName(VAR Field: Record DAMFieldBuffer) CleanFieldName: Text
    begin
        CleanFieldName := DelChr(Field.FieldName, '=', '&-%/\(),. ');
    end;

    local procedure GetCleanTableName(Field: Record DAMFieldBuffer) CleanFieldName: Text
    begin
        CleanFieldName := ConvertStr(Field.TableName, '&-%/\(),. ', '__________');
    end;

    local procedure FilterFields(VAR Fields_Found: Record DAMFieldBuffer; TableNo: Integer; IncludeDisabled: Boolean; IncludeFlowFields: Boolean; IncludeBlob: Boolean) HasFields: Boolean
    var
        Debug: Integer;
    begin
        //* FilterField({TableNo}False{IncludeEnabled},False{IncludeFlowFields},False{IncludeBlob});
        CLEAR(Fields_Found);
        Fields_Found.SETRANGE(TableNo, TableNo);
        Debug := Fields_Found.Count;
        IF NOT IncludeDisabled THEN
            Fields_Found.SETRANGE(Enabled, TRUE);
        Debug := Fields_Found.Count;
        // AUSNAHME FÃR TABELLE 54296, hier alle FlowFields als echte Felder Ã¼bernehmen
        IF TableNo <> 54296 THEN
            IF NOT IncludeFlowFields THEN
                Fields_Found.SETRANGE(Class, Fields_Found.Class::Normal);
        IF NOT IncludeBlob THEN
            Fields_Found.SETFILTER(Type, '<>%1', Fields_Found.Type::BLOB);
        // Fields_Found.Setrange(FieldName, 'Picture');
        // if Fields_Found.FindFirst() then;
        Debug := Fields_Found.Count;
        Fields_Found.Setrange(FieldName);
        HasFields := Fields_Found.FindFirst();
    end;

    local procedure BuildKeyString(TableIDInNAV: Integer) KeyString: Text
    var
        dAMFieldBuffer: Record DAMFieldBuffer;
    begin
        dAMFieldBuffer.SetRange(TableNo, TableIDInNAV);
        dAMFieldBuffer.FindFirst();
        dAMFieldBuffer.SetFilter("No.", ConvertStr(dAMFieldBuffer."Primary Key", ',', '|'));
        dAMFieldBuffer.FindSet();
        repeat
            if ContainsLettersOnly(dAMFieldBuffer.FieldName) then
                KeyString += dAMFieldBuffer.FieldName + ','
            else
                KeyString += '"' + dAMFieldBuffer.FieldName + '",';
        until dAMFieldBuffer.Next() = 0;
        KeyString := DelChr(KeyString, '>', ',');
    end;

    local procedure ContainsLettersOnly(String: text): Boolean
    var
        LettersTok: Label 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', Locked = true;
    begin
        EXIT(DELCHR(String, '=', LettersTok) = '');
    end;
}
