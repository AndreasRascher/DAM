OBJECT Dataport 50004 DAMExport
{
  OBJECT-PROPERTIES
  {
    Date=10.10.21;
    Time=21:26:20;
    Modified=Yes;
    Version List=DAM;
  }
  PROPERTIES
  {
    Import=No;
    OnInitDataport=BEGIN
                     CurrDataport.FILENAME := TEMPORARYPATH+'1.txt';// Avoid Error On Run
                     IF ERASE(CurrDataport.FILENAME) THEN;
                   END;

  }
  DATAITEMS
  {
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=13200;
      Height=3410;
      SourceTable=Table2000000058;
      OnOpenForm=BEGIN
                   THIS_OnOpenForm
                 END;

      OnCloseForm=BEGIN
                    THIS_OnCloseForm
                  END;

    }
    CONTROLS
    {
      { 1000000002;Label  ;0    ;0    ;0    ;0    ;InPage=-1;
                                                   InColumnHeading=Yes }
      { 1000000006;Label  ;0    ;0    ;0    ;0    ;InPage=-1;
                                                   InColumnHeading=Yes }
      { 1000000004;Label  ;0    ;0    ;0    ;0    ;InPage=-1;
                                                   InColumnHeading=Yes }
      { 1000000000;TextBox;220  ;770  ;12650;440  ;Name=ExportFolderPathCtrl;
                                                   InPage=-1;
                                                   CaptionML=[DEU=Order fuer Tabellendaten;
                                                              ENU=Folder for Table Data];
                                                   SourceExpr=ExportToFolderPath;
                                                   OnValidate=BEGIN
                                                                CheckFolderPath(ExportToFolderPath);
                                                              END;
                                                               }
      { 1000000092;Label  ;220  ;220  ;3300 ;440  ;ParentControl=1000000000;
                                                   InPage=-1 }
      { 1000000001;TextBox;220  ;1980 ;12650;440  ;Name=ExportObjectIDFilterCtrl;
                                                   AssistEdit=Yes;
                                                   CaptionML=[DEU=Tabellen-ID Filter fuer Export;
                                                              ENU=Table ID Filter for Export];
                                                   SourceExpr=ExportTableIDFilter;
                                                   OnAssistEdit=BEGIN
                                                                  LookUpObjIDFilter
                                                                END;
                                                                 }
      { 1000000003;Label  ;220  ;1430 ;10670;440  ;ParentControl=1000000001;
                                                   InPage=-1 }
      { 1000000005;CommandButton;220;2640;3300;550;Name=ExportCtrl;
                                                   CaptionML=[DEU=Daten exportieren;
                                                              ENU=Export Data];
                                                   OnPush=BEGIN
                                                            THIS_ExportCtrl_OnPush
                                                          END;
                                                           }
      { 1000000007;CommandButton;4400;2640;3300;550;
                                                   Name=ExportCtrl;
                                                   InPage=-1;
                                                   CaptionML=[DEU=Schema exportieren (Felder);
                                                              ENU=Export Schema (Fields)];
                                                   OnPush=BEGIN
                                                            THIS_ExportFieldsCtrl_OnPush
                                                          END;
                                                           }
    }
  }
  CODE
  {
    VAR
      ExportToFolderPath@1000000000 : Text[1024];
      ExportTableIDFilter@1000000001 : Text[1024];
      ADOStream@1000000003 : Automation "{B691E011-1797-432E-907A-4D8C69339129} 6.0:{00000566-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 6.0 Library'.Stream";

    PROCEDURE CheckFolderPath@1000000000(FolderPathToCheck@1000000000 : Text[1024]);
    VAR
      FSO@1000000001 : Automation "{420B2830-E718-11CF-893D-00A0C9054228} 1.0:{0D43FE01-F093-11CF-8940-00A0C9054228}:'Microsoft Scripting Runtime'.FileSystemObject";
    BEGIN
      IF ISCLEAR(FSO) THEN
        CREATE(FSO);
      IF NOT FSO.FolderExists(FolderPathToCheck) THEN
       ERROR(STRSUBSTNO('UngÅltiger Ordnerpfad: %1',FolderPathToCheck));
      IF ExportToFolderPath[STRLEN(ExportToFolderPath)]<>'\' THEN
        ExportToFolderPath += '\';
    END;

    PROCEDURE THIS_ExportCtrl_OnPush@1000000002();
    VAR
      AllObjWithCaption@1000000000 : Record 2000000058;
      ExportToPath@1000000001 : Text[1024];
      ExportDuration@1000000002 : Duration;
      Progress@1000000003 : Dialog;
      ReadyMsg@1000000004 : Text[1024];
    BEGIN
      AllObjWithCaption.SETRANGE("Object Type",AllObjWithCaption."Object Type"::TableData);
      AllObjWithCaption.SETFILTER("Object ID",ExportTableIDFilter);
      IF NOT AllObjWithCaption.FINDSET THEN EXIT;
      ReadyMsg:='DAM EXPORT:';
      REPEAT
        ExportToPath := ExportToFolderPath + CONVERTSTR(AllObjWithCaption."Object Caption",'<>*\/|"','_______') +'.txt';

        EXPORT_ExportFullTable(ExportToPath,AllObjWithCaption."Object ID",FALSE,ExportDuration,FALSE,FALSE,'');
        ReadyMsg += STRSUBSTNO('\%1: %2',AllObjWithCaption."Object Caption",ExportDuration);

      UNTIL AllObjWithCaption.NEXT = 0;
      MESSAGE(ReadyMsg)
    END;

    PROCEDURE THIS_ExportFieldsCtrl_OnPush@1000000016();
    VAR
      AllObjWithCaption@1000000004 : Record 2000000058;
      ExportToPath@1000000003 : Text[1024];
      ExportDuration@1000000002 : Duration;
      Progress@1000000001 : Dialog;
      ReadyMsg@1000000000 : Text[1024];
      Field@1000000005 : Record 2000000041;
    BEGIN
      AllObjWithCaption.SETRANGE("Object Type",AllObjWithCaption."Object Type"::TableData);
      AllObjWithCaption.SETRANGE("Object ID",DATABASE::Field);
      IF NOT AllObjWithCaption.FINDSET THEN EXIT;
      ReadyMsg:='DAM EXPORT:';
      REPEAT
        ExportToPath := ExportToFolderPath + 'Schema'+'.txt';
        Progress.OPEN(STRSUBSTNO('Export %1',CONVERTSTR(ExportToPath,'\','/')));
        Field.SETRANGE(TableNo,0,2000000000);
        EXPORT_ExportFullTable(ExportToPath,AllObjWithCaption."Object ID",FALSE,ExportDuration,TRUE,TRUE,Field.GETVIEW);
        ReadyMsg += STRSUBSTNO('\%1: %2',AllObjWithCaption."Object Caption",ExportDuration);
        Progress.CLOSE;
      UNTIL AllObjWithCaption.NEXT = 0;
      MESSAGE(ReadyMsg)
    END;

    PROCEDURE THIS_OnOpenForm@1000000004();
    BEGIN
      LoadSettings
    END;

    PROCEDURE THIS_OnCloseForm@1000000005();
    BEGIN
      SaveSettings;
      CurrDataport.QUIT;
    END;

    PROCEDURE SaveSettings@1000000001();
    VAR
      _RecordLink@1000000000 : Record 2000000068;
      _AllObjWithCaption@1000000001 : Record 2000000058;
      _RecRef@1000000002 : RecordRef;
      _Content@1000000003 : BigText;
    BEGIN
      _AllObjWithCaption.GET(_AllObjWithCaption."Object Type"::Codeunit,1);
      _RecRef.GETTABLE(_AllObjWithCaption);
      _RecordLink.SETRANGE("Record ID",_RecRef.RECORDID);
      _RecordLink.SETRANGE(Description,'DAM');
      IF NOT _RecordLink.FINDFIRST THEN BEGIN
        _RecordLink.GET(_AllObjWithCaption.ADDLINK('','DAM'));
      END;

      _Content.ADDTEXT(ExportToFolderPath + CRLF + ExportTableIDFilter);
      WriteBlobText(_RecordLink,_Content);
    END;

    PROCEDURE LoadSettings@1000000003();
    VAR
      _LineArray@1000000001 : ARRAY [10] OF Text[1024];
      _Content_FOUND@1000000000 : BigText;
      _RecordLink@1000000005 : Record 2000000068;
      _AllObjWithCaption@1000000004 : Record 2000000058;
      _RecRef@1000000003 : RecordRef;
      i@1000000002 : Integer;
    BEGIN
      _AllObjWithCaption.GET(_AllObjWithCaption."Object Type"::Codeunit,1);
      _RecRef.GETTABLE(_AllObjWithCaption);
      _RecordLink.SETRANGE("Record ID",_RecRef.RECORDID);
      _RecordLink.SETRANGE(Description,'DAM');
      IF NOT _RecordLink.FINDFIRST THEN EXIT;

      ReadBlobText(_RecordLink,_LineArray);
      FOR i:= 1 TO ARRAYLEN(_LineArray) DO BEGIN
          CASE i OF
            1: ExportToFolderPath  := _LineArray[i];
            2: ExportTableIDFilter := _LineArray[i];
          END;
      END;
    END;

    PROCEDURE ReadBlobText@1000000006(VAR _RecordLink@1000000000 : Record 2000000068;VAR _LineArray@1000000005 : ARRAY [10] OF Text[1024]);
    VAR
      CRLF@1000000001 : Text[2];
      InS@1000000002 : InStream;
      LineText@1000000003 : Text[1024];
      LineCount@1000000004 : Integer;
    BEGIN
      _RecordLink.CALCFIELDS(Note);
      IF NOT _RecordLink.Note.HASVALUE THEN
      EXIT;
      CLEAR(_LineArray);
      _RecordLink.Note.CREATEINSTREAM(InS);
      WHILE NOT InS.EOS DO BEGIN
        LineCount += 1;
        InS.READTEXT(LineText);
        _LineArray[LineCount]:= LineText;
      END;
    END;

    PROCEDURE WriteBlobText@1000000007(VAR _RecordLink@1000000001 : Record 2000000068;Content@1000000000 : BigText);
    VAR
      OutStream@1000000002 : OutStream;
    BEGIN
      CLEAR(_RecordLink.Note);
      IF FORMAT(Content) = '' THEN BEGIN
      _RecordLink.MODIFY;
      EXIT;
      END;
      _RecordLink.Note.CREATEOUTSTREAM(OutStream);
      OutStream.WRITETEXT(FORMAT(Content));
      _RecordLink.MODIFY;
    END;

    PROCEDURE CRLF@1000000008() CRLFLineBreak : Text[2];
    BEGIN
      CRLFLineBreak[1] := 13;
      CRLFLineBreak[2] := 10;
    END;

    PROCEDURE LookUpObjIDFilter@1000000009();
    VAR
      AllObj@1000000000 : Record 2000000038;
    BEGIN
      AllObj.SETRANGE("Object Type",AllObj."Object Type"::Table);
      IF FORM.RUNMODAL(0,AllObj) = ACTION::LookupOK THEN BEGIN
        IF ExportTableIDFilter = '' THEN
           ExportTableIDFilter += FORMAT(AllObj."Object ID")
         ELSE
           ExportTableIDFilter += '|' + FORMAT(AllObj."Object ID");
      END;
    END;

    PROCEDURE EXPORT_ExportFullTable@1109900001(ExportToFilePath@1000000001 : Text[1024];ExportTableID@1000000004 : Integer;ExportWithTitleLine@1000000007 : Boolean;VAR ExportDuration@1000000003 : Duration;IsFieldTableExport@1000000010 : Boolean;UseBigText@1000000016 : Boolean;TableView@1000000011 : Text[1024]);
    VAR
      _Start@1000000000 : DateTime;
      _LastFieldNo@1000000002 : Integer;
      _ExportFieldBuffer@1000000005 : TEMPORARY Record 2000000041;
      _ExportRecRef@1000000006 : RecordRef;
      _NewFilePath@1000000008 : Text[1024];
      _FieldSeparator@1000000009 : Text[1];
      _Progress@1000000012 : Dialog;
      _TotalLines@1000000013 : Integer;
      _Step@1000000014 : Integer;
      _LastUpdate@1000000015 : DateTime;
    BEGIN
      CLEAR(ExportDuration);

      IF ExportTableID = 0 THEN
       ERROR('ExportTableID not defined');
      IF ExportToFilePath = '' THEN
        ERROR('ExportToFilename not defined');
      _FieldSeparator[1] := 9; // TAB
      _Start := CURRENTDATETIME;

      EXPORT_InitADOStream;
      EXPORT_InitExportFieldBuffer(_ExportFieldBuffer,ExportTableID);

      IF IsFieldTableExport THEN BEGIN
        _ExportFieldBuffer.INIT;
        _ExportFieldBuffer.TableNo := DATABASE::Field;
        _ExportFieldBuffer."No." := 50000;
        _ExportFieldBuffer.FieldName := 'Table Caption';
        _ExportFieldBuffer."Field Caption" := 'Tabellenbezeichnung';
        _ExportFieldBuffer.Type := _ExportFieldBuffer.Type::Text;
        _ExportFieldBuffer.Len := 250;
        _ExportFieldBuffer.INSERT;

        _ExportFieldBuffer.INIT;
        _ExportFieldBuffer.TableNo := DATABASE::Field;
        _ExportFieldBuffer."No." := 50001;
        _ExportFieldBuffer.FieldName := 'Primary Key';
        _ExportFieldBuffer."Field Caption" := 'PrimÑrschlÅssel';
        _ExportFieldBuffer.Type := _ExportFieldBuffer.Type::Text;
        _ExportFieldBuffer.Len := 250;
        _ExportFieldBuffer.INSERT;

        _ExportFieldBuffer.INIT;
        _ExportFieldBuffer.TableNo := DATABASE::Field;
        _ExportFieldBuffer."No." := 50002;
        _ExportFieldBuffer.FieldName := 'OptionString';
        _ExportFieldBuffer.Type := _ExportFieldBuffer.Type::Text;
        _ExportFieldBuffer.Len := 250;
        _ExportFieldBuffer.INSERT;

        _ExportFieldBuffer.INIT;
        _ExportFieldBuffer.TableNo := DATABASE::Field;
        _ExportFieldBuffer."No." := 50003;
        _ExportFieldBuffer.FieldName := 'OptionCaption';
        _ExportFieldBuffer.Type := _ExportFieldBuffer.Type::Text;
        _ExportFieldBuffer.Len := 250;
        _ExportFieldBuffer.INSERT;
      END;

      _ExportFieldBuffer.FINDLAST;
      _LastFieldNo := _ExportFieldBuffer."No.";
      _ExportRecRef.OPEN(ExportTableID,FALSE);
      _TotalLines := _ExportRecRef.COUNT;
      _Progress.OPEN(STRSUBSTNO('Export %1\@@@@@@@@@@@@@@@@@@@@@@1@\Tabelle %2 - %3 Zeilen',
                                 CONVERTSTR(ExportToFilePath,'\','/'),
                                 _ExportRecRef.CAPTION,
                                 _TotalLines));

      IF TableView <> '' THEN
        _ExportRecRef.SETVIEW(TableView);
      IF NOT _ExportRecRef.FINDSET(FALSE,FALSE) THEN EXIT;
      IF ExportWithTitleLine THEN
        EXPORT_CreateHeaderLine(_ExportFieldBuffer,_LastFieldNo,_FieldSeparator); // Header
      // Lines
      _LastUpdate := CURRENTDATETIME + 500;
      REPEAT
        IF UseBigText THEN BEGIN
          // Required for extra columns
          EXPORT_ExportSingleTableRecBT(_ExportRecRef,_ExportFieldBuffer,_LastFieldNo,_FieldSeparator);
        END ELSE BEGIN
          // Faster without BigText (BT)
          EXPORT_ExportSingleTableRec(_ExportRecRef,_ExportFieldBuffer,_LastFieldNo,_FieldSeparator);
        END;

        _Step += 1;
        IF ABS(CURRENTDATETIME-_LastUpdate) > 500 THEN BEGIN
          _Progress.UPDATE(1,(10000*(_Step/_TotalLines)) DIV 1);
          _LastUpdate := CURRENTDATETIME;
        END;
      UNTIL _ExportRecRef.NEXT = 0;

      ADOStream.SaveToFile(ExportToFilePath,2); // 2- Overwrite, 1- Default
      ADOStream.Close;
      CLEAR(ADOStream);

      ExportDuration := CURRENTDATETIME - _Start;

      _Progress.CLOSE;
    END;

    PROCEDURE EXPORT_ExportSingleTableRec@1000000014(VAR _RecRef@1000000000 : RecordRef;VAR _ExportFieldBuffer@1000000002 : TEMPORARY Record 2000000041;_LastFieldNo@1000000001 : Integer;_FieldSeparator@1000000004 : Text[1]);
    VAR
      _ValueAsText@1000000003 : Text[1024];
      _CurrTableRef@1000000005 : RecordRef;
      _CurrFldRef@1000000009 : FieldRef;
      _Field@1000000010 : Record 2000000041;
      _TableNo@1000000006 : Integer;
      _FieldNo@1000000008 : Integer;
      _LineText@1000000007 : Text[1024];
    BEGIN
      //IF IsExportAllowed(ExportRecRef) THEN BEGIN
        _ExportFieldBuffer.FINDSET;
        REPEAT
          CLEAR(_ValueAsText);
          // Format Field in XML Format, Zero numbers are empty (Save Space)
          CASE TRUE OF
            (_ExportFieldBuffer.TableNo = DATABASE::Field) AND (_ExportFieldBuffer."No."=50000): BEGIN
              CLEAR(_CurrTableRef);
              _TableNo := _RecRef.FIELD(1).VALUE;
              _CurrTableRef.OPEN(_TableNo,FALSE);
              _ValueAsText := _CurrTableRef.CAPTION;
            END;
            (_ExportFieldBuffer.TableNo = DATABASE::Field) AND (_ExportFieldBuffer."No."=50001): BEGIN
              _TableNo := _RecRef.FIELD(1).VALUE;
              CLEAR(_CurrTableRef);
              _CurrTableRef.OPEN(_TableNo,FALSE);
              _ValueAsText := GetTextListOfKeyFieldIDs(_CurrTableRef.NUMBER);
            END;
            //OptionString
            (_ExportFieldBuffer.TableNo = DATABASE::Field) AND (_ExportFieldBuffer."No."=50002): BEGIN
              _RecRef.SETTABLE(_Field);
              IF _Field.Type = _Field.Type::Option THEN BEGIN
                CLEAR(_CurrTableRef);
                _CurrTableRef.OPEN(_Field.TableNo,FALSE);
                _CurrFldRef := _CurrTableRef.FIELD(_Field."No.");
                GetTextListOfOptionString(_CurrFldRef,_ValueAsText);
              END;
            END;
            (_ExportFieldBuffer.TableNo = DATABASE::Field) AND (_ExportFieldBuffer."No."=50003): BEGIN
              _RecRef.SETTABLE(_Field);
              IF _Field.Type = _Field.Type::Option THEN BEGIN
                CLEAR(_CurrTableRef);
                _CurrTableRef.OPEN(_Field.TableNo,FALSE);
                _CurrFldRef := _CurrTableRef.FIELD(_Field."No.");
                //mask leading "
                IF (STRLEN(_CurrFldRef.OPTIONCAPTION)>1) AND (COPYSTR(_CurrFldRef.OPTIONCAPTION,1,2)=' ,') THEN BEGIN
                  _ValueAsText := '" "'+COPYSTR(_CurrFldRef.OPTIONCAPTION,2);
                END ELSE BEGIN
                  _ValueAsText := _CurrFldRef.OPTIONCAPTION;
                END;
              END;
            END;
            ELSE _ValueAsText := EXPORT_FormatFieldValue(_RecRef,_ExportFieldBuffer."No.");
          END; // END_CASE

          // Remove FieldSeparator from Value
          //_ValueAsText := ReplaceStr(_ValueAsText,_FieldSeparator,'');
          RemoveSpecialChars(_ValueAsText);
          ADOStream.WriteText(_ValueAsText,0{LineBreak});
          IF _LastFieldNo = _ExportFieldBuffer."No." THEN
                ADOStream.WriteText('',1{LineBreak})
          ELSE
                ADOStream.WriteText(_FieldSeparator,0);

        UNTIL _ExportFieldBuffer.NEXT = 0;
    END;

    PROCEDURE EXPORT_ExportSingleTableRecBT@1000000017(VAR _RecRef@1000000000 : RecordRef;VAR _ExportFieldBuffer@1000000002 : TEMPORARY Record 2000000041;_LastFieldNo@1000000001 : Integer;_FieldSeparator@1000000004 : Text[1]);
    VAR
      _ValueAsText@1000000003 : BigText;
      _CurrTableRef@1000000005 : RecordRef;
      _CurrFldRef@1000000009 : FieldRef;
      _Field@1000000010 : Record 2000000041;
      _TableNo@1000000006 : Integer;
      _FieldNo@1000000008 : Integer;
      _LineText@1000000007 : Text[1024];
    BEGIN
      //IF IsExportAllowed(ExportRecRef) THEN BEGIN
        _ExportFieldBuffer.FINDSET;
        REPEAT
          CLEAR(_ValueAsText);
          // Format Field in XML Format, Zero numbers are empty (Save Space)
          CASE TRUE OF
            (_ExportFieldBuffer.TableNo = DATABASE::Field) AND (_ExportFieldBuffer."No."=50000): BEGIN
              CLEAR(_CurrTableRef);
              _TableNo := _RecRef.FIELD(1).VALUE;
              _CurrTableRef.OPEN(_TableNo,FALSE);
              _ValueAsText.ADDTEXT(_CurrTableRef.CAPTION);
            END;
            (_ExportFieldBuffer.TableNo = DATABASE::Field) AND (_ExportFieldBuffer."No."=50001): BEGIN
              _TableNo := _RecRef.FIELD(1).VALUE;
              CLEAR(_CurrTableRef);
              _CurrTableRef.OPEN(_TableNo,FALSE);
              _ValueAsText.ADDTEXT(GetTextListOfKeyFieldIDs(_CurrTableRef.NUMBER));
            END;
            //OptionString
            (_ExportFieldBuffer.TableNo = DATABASE::Field) AND (_ExportFieldBuffer."No."=50002): BEGIN
              _RecRef.SETTABLE(_Field);
              IF _Field.Type = _Field.Type::Option THEN BEGIN
                CLEAR(_CurrTableRef);
                _CurrTableRef.OPEN(_Field.TableNo,FALSE);
                _CurrFldRef := _CurrTableRef.FIELD(_Field."No.");
                GetTextListOfOptionStringBT(_CurrFldRef,_ValueAsText);
              END;
            END;
            (_ExportFieldBuffer.TableNo = DATABASE::Field) AND (_ExportFieldBuffer."No."=50003): BEGIN
              _RecRef.SETTABLE(_Field);
              IF _Field.Type = _Field.Type::Option THEN BEGIN
                CLEAR(_CurrTableRef);
                _CurrTableRef.OPEN(_Field.TableNo,FALSE);
                _CurrFldRef := _CurrTableRef.FIELD(_Field."No.");
                //mask leading "
                IF (STRLEN(_CurrFldRef.OPTIONCAPTION)>1) AND (COPYSTR(_CurrFldRef.OPTIONCAPTION,1,2)=' ,') THEN BEGIN
                  _ValueAsText.ADDTEXT('" "'+COPYSTR(_CurrFldRef.OPTIONCAPTION,2));
                END ELSE BEGIN
                  _ValueAsText.ADDTEXT(_CurrFldRef.OPTIONCAPTION);
                END;
              END;
            END;
            ELSE _ValueAsText.ADDTEXT(EXPORT_FormatFieldValue(_RecRef,_ExportFieldBuffer."No."));
          END; // END_CASE

          // Remove FieldSeparator from Value
          //_ValueAsText := ReplaceStr(_ValueAsText,_FieldSeparator,'');
          RemoveSpecialCharsBT(_ValueAsText);
          AddBigTextToADOStream(_ValueAsText);
          IF _LastFieldNo = _ExportFieldBuffer."No." THEN
                ADOStream.WriteText('',1{LineBreak})
          ELSE
                ADOStream.WriteText(_FieldSeparator,0);

        UNTIL _ExportFieldBuffer.NEXT = 0;
    END;

    PROCEDURE EXPORT_CreateHeaderLine@1000000013(VAR _ExportFieldBuffer@1000000001 : TEMPORARY Record 2000000041;_LastFieldNo@1000000000 : Integer;_FieldSeparator@1000000003 : Text[1]);
    VAR
      _ValueAsText@1000000002 : Text[1024];
    BEGIN
      _ExportFieldBuffer.FINDSET;
      REPEAT
        _ValueAsText := ReplaceStr(_ExportFieldBuffer.FieldName,_FieldSeparator,'');  // Remove FieldSeparator from Value
        IF _LastFieldNo <> _ExportFieldBuffer."No." THEN
          ADOStream.WriteText(_ValueAsText + _FieldSeparator,0)  // Write
        ELSE
          ADOStream.WriteText(_ValueAsText + _FieldSeparator,1); // Write with LineBreak
      UNTIL _ExportFieldBuffer.NEXT = 0;
    END;

    PROCEDURE EXPORT_InitADOStream@1000000012();
    BEGIN
      CLEAR(ADOStream);
      CREATE(ADOStream);
      // [LINEFieldSeparatorENUM LineFieldSeparator]
      // adCR    13  Indicates carriage return.
      // adCRLF  -1  Default. Indicates carriage return line feed.
      // adLF    10  Indicates line feed.
      ADOStream.LineSeparator(-1);

      ADOStream.Open;
      //ADOStream.Charset('iso-8859-1'); //UTF-8, default is unicode
    END;

    PROCEDURE EXPORT_InitExportFieldBuffer@1000000011(VAR _ExportFieldsFOUND@1000000001 : TEMPORARY Record 2000000041;_ExportTableID@1000000003 : Integer);
    VAR
      _Fields@1000000000 : Record 2000000041;
      _ExportFieldBuffer@1000000002 : TEMPORARY Record 2000000041;
    BEGIN
      IF _ExportTableID <> 0 THEN
        _Fields.SETRANGE(TableNo,_ExportTableID);
      _Fields.SETFILTER(Type,'<>%1',_Fields.Type::BLOB);
      _Fields.SETRANGE(Class,_Fields.Class::Normal);
      _Fields.SETRANGE(Enabled,TRUE);
      _Fields.FINDSET;
      REPEAT
        _ExportFieldBuffer := _Fields;
        _ExportFieldBuffer.INSERT;
      UNTIL _Fields.NEXT = 0;
      _ExportFieldsFOUND.COPY(_ExportFieldBuffer,TRUE);
    END;

    PROCEDURE EXPORT_FormatFieldValue@1000000010(VAR _RecRef@1000000008 : RecordRef;_FieldNo@1000000009 : Integer) _Result : Text[1024];
    VAR
      _FieldRef@1000000000 : FieldRef;
      _Value@1000000007 : Variant;
      _Integer@1000000002 : Integer;
      _Text@1000000003 : Text[1024];
      _Decimal@1000000004 : Decimal;
      _Date@1000000005 : Date;
      _Time@1000000001 : Time;
      _Boolean@1000000006 : Boolean;
      _Field@1000000010 : Record 2000000041;
    BEGIN
      //* DATENTYP-MAPPING UM FORMAT-ANWEISUNG IM CODE ZU MINIMIEREN
      _FieldRef := _RecRef.FIELD(_FieldNo);
      _FieldRef.VALUE := _FieldRef.VALUE;
      CASE UPPERCASE(FORMAT(_FieldRef.TYPE)) OF
        'BOOLEAN': BEGIN; _Boolean := _FieldRef.VALUE; _Result  := '0';   IF _Boolean THEN      _Result := '1'; END;
        'INTEGER': BEGIN; _Integer := _FieldRef.VALUE; IF _Integer <> 0 THEN _Result := FORMAT(_Integer,0,9); END;
        'OPTION':  BEGIN; _Integer := _FieldRef.VALUE; _Result := FORMAT(_Integer,0,9); END;
        'DECIMAL': BEGIN; _Decimal := _FieldRef.VALUE; IF _Decimal <> 0 THEN _Result := FORMAT(_Decimal,0,9); END;
        'DATE':    BEGIN; _Date    := _FieldRef.VALUE; IF _Date <> 0D THEN   _Result := FORMAT(_Date,0,9);    END;
        'TIME':    BEGIN; _Time := _FieldRef.VALUE;    IF _Time <> 0T THEN   _Result := FORMAT(_Time,0,9);    END;
        'CHAR','TEXT','CODE':   _Result := _FieldRef.VALUE;
        ELSE _Result := FORMAT(_FieldRef.VALUE,0,9);
      END; // END_CASE

      IF (_RecRef.NUMBER = DATABASE::Field) AND (UPPERCASE(FORMAT(_FieldRef.TYPE)) = 'OPTION')THEN BEGIN
        _RecRef.SETTABLE(_Field);
        IF (_FieldRef.NUMBER=_Field.FIELDNO(Type)) THEN
          CASE _Field.Type OF
            _Field.Type::TableFilter: _Result := '0';
            _Field.Type::RecordID   : _Result := '1';
            _Field.Type::Text       : _Result := '2';
            _Field.Type::Date       : _Result := '3';
            _Field.Type::Time       : _Result := '4';
            _Field.Type::DateFormula: _Result := '5';
            _Field.Type::Decimal    : _Result := '6';
            _Field.Type::Binary     : _Result := '7';
            _Field.Type::BLOB       : _Result := '8';
            _Field.Type::Boolean    : _Result := '9';
            _Field.Type::Integer    : _Result := '10';
            _Field.Type::Code       : _Result := '11';
            _Field.Type::Option     : _Result := '12';
            _Field.Type::BigInteger : _Result := '13';
            _Field.Type::Duration   : _Result := '14';
            _Field.Type::GUID       : _Result := '15';
            _Field.Type::DateTime   : _Result := '16';
          END;
      END;
    END;

    PROCEDURE ReplaceStr@1000000015(_Text@1000000000 : Text[1024];_FindWhat@1000000001 : Text[1024];_ReplaceWith@1000000002 : Text[1024]) _NewText : Text[1024];
    BEGIN
      WHILE STRPOS(_Text,_FindWhat) > 0 DO
        _Text := DELSTR(_Text,STRPOS(_Text,_FindWhat)) +
                  _ReplaceWith +
                  COPYSTR(_Text,STRPOS(_Text,_FindWhat)+STRLEN(_FindWhat));
      _NewText := _Text;
    END;

    PROCEDURE GetTextListOfKeyFieldIDs@1109900003(TableNo@1109900000 : Integer) KeyFieldsList : Text[1024];
    VAR
      Key@1109900001 : Record 2000000063;
      RecRef@1000000001 : RecordRef;
      KeyRef@1000000002 : KeyRef;
      FldRef@1000000003 : FieldRef;
      i@1000000004 : Integer;
    BEGIN
      RecRef.OPEN(TableNo);
      KeyRef := RecRef.KEYINDEX(1);
      FOR i := 1 TO KeyRef.FIELDCOUNT DO BEGIN
        FldRef := KeyRef.FIELDINDEX(i);
        KeyFieldsList += FORMAT(FldRef.NUMBER) + ',';
      END;
      KeyFieldsList := DELCHR(KeyFieldsList,'>',',');
    END;

    PROCEDURE RemoveSpecialChars@1109900000(VAR Text@1109900000 : Text[1024]);
    VAR
      CharArray@1109900001 : Text[30];
      Chunk@1000000000 : Text[1];
      TextOLD@1000000001 : BigText;
      i@1000000002 : Integer;
    BEGIN
      CharArray[1] := 9; // TAB
      CharArray[2] := 10; // LF
      CharArray[3] := 13; // CR
      Text := DELCHR(Text,'=',CharArray);
    END;

    PROCEDURE RemoveSpecialCharsBT@1000000022(VAR Text@1109900000 : BigText);
    VAR
      CharArray@1109900001 : Text[30];
      Chunk@1000000000 : Text[1];
      TextOLD@1000000001 : BigText;
      i@1000000002 : Integer;
    BEGIN
      CharArray[1] := 9; // TAB
      CharArray[2] := 10; // LF
      CharArray[3] := 13; // CR
      Text.GETSUBTEXT(TextOLD,1,Text.LENGTH);
      CLEAR(Text);
      FOR i:=1 TO TextOLD.LENGTH DO BEGIN
        TextOLD.GETSUBTEXT(Chunk,i,1);
        Text.ADDTEXT(DELCHR(Chunk, '=', CharArray));
      END;
    END;

    PROCEDURE GetTextListOfOptionString@1000000032(_FieldRef@1000000000 : FieldRef;VAR _Result@1000000006 : Text[1024]);
    VAR
      Letters@1000000005 : TextConst 'DEU=abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
      _OptionCounter@1000000001 : Integer;
      _OptionString@1000000002 : Text[1024];
      i@1000000003 : Integer;
      _OptionElement@1000000004 : Text[1024];
      _SubStr@1000000007 : Text[30];
    BEGIN
      _OptionString := _FieldRef.OPTIONSTRING;
      _OptionCounter := 1;
      FOR i := 1 TO STRLEN(_OptionString) DO BEGIN
        IF _OptionString[i] = ',' THEN
          _OptionCounter += 1;
      END;

      FOR i := 1 TO _OptionCounter DO BEGIN
        _OptionElement := SELECTSTR(i,_OptionString);
        IF ContainsOnlyLetters(_OptionElement) THEN BEGIN
          _Result += STRSUBSTNO('%1,',_OptionElement);
        END ELSE BEGIN
          _Result += STRSUBSTNO('"%1",',_OptionElement);
        END;
      END;
      IF STRLEN(_Result) > 0 THEN
        _Result := DELCHR(_Result,'>',',');
    END;

    PROCEDURE GetTextListOfOptionStringBT@1000000021(_FieldRef@1000000000 : FieldRef;VAR _Result@1000000006 : BigText);
    VAR
      Letters@1000000005 : TextConst 'DEU=abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
      _OptionCounter@1000000001 : Integer;
      _OptionString@1000000002 : Text[1024];
      i@1000000003 : Integer;
      _OptionElement@1000000004 : Text[1024];
      _SubStr@1000000007 : Text[30];
    BEGIN
      _OptionString := _FieldRef.OPTIONSTRING;
      _OptionCounter := 1;
      FOR i := 1 TO STRLEN(_OptionString) DO BEGIN
        IF _OptionString[i] = ',' THEN
          _OptionCounter += 1;
      END;

      FOR i := 1 TO _OptionCounter DO BEGIN
        _OptionElement := SELECTSTR(i,_OptionString);
        IF ContainsOnlyLetters(_OptionElement) THEN BEGIN
          _Result.ADDTEXT(STRSUBSTNO('%1,',_OptionElement));
        END ELSE BEGIN
          _Result.ADDTEXT(STRSUBSTNO('"%1",',_OptionElement));
        END;
      END;
      IF _Result.LENGTH > 0 THEN
        _Result.GETSUBTEXT(_SubStr,_Result.LENGTH,1);
      IF _SubStr = ',' THEN
        _Result.GETSUBTEXT(_Result,1,_Result.LENGTH-1);
    END;

    PROCEDURE ContainsOnlyLetters@1000000033(String@1000000000 : Text[1024]) : Boolean;
    VAR
      Letters@1000000001 : TextConst 'DEU=abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
    BEGIN
      EXIT(DELCHR(String,'=',Letters) = '');
    END;

    PROCEDURE AddBigTextToADOStream@1000000020(Content@1000000000 : BigText);
    VAR
      Pos@1000000002 : Integer;
      Chunk@1000000001 : Text[1024];
    BEGIN
      Pos:=1;
      WHILE Pos <= Content.LENGTH DO BEGIN
        Pos += Content.GETSUBTEXT(Chunk,Pos,1024);
        ADOStream.WriteText(Chunk,0{LineBreak});
      END;
    END;

    BEGIN
    END.
  }
}

